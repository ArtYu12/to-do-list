{"ast":null,"code":"import { profileAPI } from '../components/api/profile-api.ts';\nimport { stopSubmit } from 'redux-form';\nconst ADD_POST = 'ADD-POST';\nconst UPDATE_NEW_POST_TEXT = 'UPDATE-NEW-POST-TEXT';\nconst SET_USER_PROFILE = 'SET_USER_PROFILE';\nconst SET_STATUS = 'SET_STATUS';\nconst DELETE_POST = 'DELETE_POST';\nconst SAVE_PHOTO_SUCCESS = 'SAVE_PHOTO_SUCCESS';\nconst SET_ERROR = 'SET_ERROR';\nlet initialState = {\n  posts: [{\n    'id': 1,\n    'message': 'Hi,how are you?',\n    'likesCount': 22\n  }, {\n    'id': 2,\n    'message': 'It\\'s my first post',\n    'likesCount': 15\n  }],\n  profile: null,\n  status: \"\",\n  error: \"\"\n};\nconst profileReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case ADD_POST:\n      {\n        let newPost = {\n          'id': 5,\n          'message': action.post,\n          'likesCount': 0\n        };\n        return {\n          ...state,\n          posts: [...state.posts, newPost]\n        };\n      }\n    case SET_USER_PROFILE:\n      {\n        return {\n          ...state,\n          profile: action.profile\n        };\n      }\n    case SET_STATUS:\n      {\n        return {\n          ...state,\n          status: action.status\n        };\n      }\n    case DELETE_POST:\n      {\n        return {\n          ...state,\n          posts: state.posts.filter(p => p.id != action.postId)\n        };\n      }\n    case SAVE_PHOTO_SUCCESS:\n      {\n        return {\n          ...state,\n          profile: {\n            ...state.profile,\n            photos: action.photos\n          }\n        };\n      }\n    case SET_ERROR:\n      {\n        return {\n          ...state,\n          error: action.error\n        };\n      }\n    default:\n      {\n        return state;\n      }\n  }\n};\nexport const addPostActionCreater = post => ({\n  type: ADD_POST,\n  post\n});\nexport const setUserProfile = profile => ({\n  type: SET_USER_PROFILE,\n  profile\n});\nexport const setStatus = status => ({\n  type: SET_STATUS,\n  status: status\n});\nexport const deletePost = postId => ({\n  type: DELETE_POST,\n  postId\n});\nexport const savePhotoSuccess = photos => ({\n  type: SAVE_PHOTO_SUCCESS,\n  photos\n});\n\n//const setError = (error:string):setErrorType => \n({\n  type: SET_ERROR,\n  error\n});\nexport const getProfile = profileId => async dispatch => {\n  let response = await profileAPI.getProfile(profileId);\n  dispatch(setUserProfile(response));\n};\nexport const getStatus = profileId => async dispatch => {\n  let response = await profileAPI.getStatus(profileId);\n  dispatch(setStatus(response));\n};\nexport const updateStatus = status => async dispatch => {\n  try {\n    let response = await profileAPI.updateStatus(status);\n    if (response.resultCode === 0) {\n      dispatch(setStatus(status));\n    }\n  } catch (error) {\n    dispatch(setError(error.messages[0]));\n  }\n};\nexport const savePhoto = file => async dispatch => {\n  let response = await profileAPI.savePhoto(file);\n  if (response.resultCode === 0) {\n    dispatch(savePhotoSuccess(response.data.photos));\n  }\n};\nexport const saveProfile = profile => async (dispatch, getState) => {\n  const userId = getState().auth.userId;\n  let response = await profileAPI.saveProfile(profile);\n  if (response.resultCode === 0) {\n    dispatch(getProfile(userId));\n  } else {\n    dispatch(stopSubmit('edit-profile', {\n      _error: response.messages[0]\n    }));\n    return Promise.reject(response.messages[0]);\n  }\n};\nexport default profileReducer;","map":{"version":3,"names":["profileAPI","stopSubmit","ADD_POST","UPDATE_NEW_POST_TEXT","SET_USER_PROFILE","SET_STATUS","DELETE_POST","SAVE_PHOTO_SUCCESS","SET_ERROR","initialState","posts","profile","status","error","profileReducer","state","action","type","newPost","post","filter","p","id","postId","photos","addPostActionCreater","setUserProfile","setStatus","deletePost","savePhotoSuccess","getProfile","profileId","dispatch","response","getStatus","updateStatus","resultCode","setError","messages","savePhoto","file","data","saveProfile","getState","userId","auth","_error","Promise","reject"],"sources":["C:/Dev/react/project1/src/redux/profile-reducer.ts"],"sourcesContent":["import { ThunkAction } from 'redux-thunk';\r\nimport {profileAPI} from '../components/api/profile-api.ts';\r\nimport {stopSubmit} from 'redux-form'\r\nimport {PostType,ProfileType,PhotosType} from './../types/types'\r\nimport { AppStateType } from './redux-store.ts';\r\n\r\nconst ADD_POST = 'ADD-POST'\r\nconst UPDATE_NEW_POST_TEXT = 'UPDATE-NEW-POST-TEXT'\r\nconst SET_USER_PROFILE  = 'SET_USER_PROFILE'\r\nconst SET_STATUS  = 'SET_STATUS'\r\nconst DELETE_POST = 'DELETE_POST'\r\nconst SAVE_PHOTO_SUCCESS = 'SAVE_PHOTO_SUCCESS'\r\nconst SET_ERROR = 'SET_ERROR'\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\nlet initialState = {\r\n  posts: [\r\n      {'id':1, 'message':'Hi,how are you?', 'likesCount': 22},\r\n      {'id':2, 'message':'It\\'s my first post', 'likesCount': 15}\r\n    ] as Array<PostType>,\r\n  profile: null as ProfileType | null,\r\n  status:\"\",\r\n  error:\"\"\r\n}\r\nconst profileReducer = (state:InitialStateType = initialState,action:ActionsType):InitialStateType =>{\r\n    switch(action.type){\r\n   \r\n    case ADD_POST: {\r\n        let newPost = {\r\n          'id': 5, \r\n          'message':action.post,\r\n          'likesCount': 0\r\n        };\r\n        return {\r\n            ...state,\r\n            posts: [...state.posts, newPost]\r\n        }\r\n      }\r\n    case SET_USER_PROFILE:{\r\n      return {\r\n        ...state,\r\n        profile:action.profile\r\n      }\r\n    }\r\n    case SET_STATUS:{\r\n      return {\r\n        ...state,\r\n        status:action.status\r\n      }\r\n    }\r\n    case DELETE_POST:{\r\n      return {\r\n        ...state,\r\n        posts:state.posts.filter(p => p.id != action.postId)\r\n      }\r\n    }\r\n    case SAVE_PHOTO_SUCCESS:{\r\n      return {\r\n        ...state,\r\n        profile: {...state.profile , photos:action.photos} as ProfileType\r\n      }\r\n    }\r\n    case SET_ERROR : {\r\n      return {\r\n        ...state,\r\n        error:action.error\r\n      }\r\n    }\r\n    default: {\r\n        return state;\r\n    }\r\n  }\r\n}\r\ntype addPostActionCreaterType = {\r\n  type:typeof ADD_POST\r\n  post:string\r\n}\r\n\r\nexport const addPostActionCreater = (post:string):addPostActionCreaterType => ({type:ADD_POST,post});\r\n\r\nexport const setUserProfile  = (profile:ProfileType):setUserProfileType => ({type:SET_USER_PROFILE,profile});\r\n\r\nexport const setStatus = (status:string):setStatusType => ({ type:SET_STATUS, status:status });\r\n\r\nexport const deletePost = (postId:number):deletePostType => ({ type:DELETE_POST,postId});\r\n\r\nexport const savePhotoSuccess = (photos:PhotosType):savePhotoSuccessType => ({ type:SAVE_PHOTO_SUCCESS,photos});\r\n\r\n\r\n\r\n//const setError = (error:string):setErrorType => \r\n({type:SET_ERROR,error});\r\ntype ThunkType = ThunkAction<Promise<void>,AppStateType,unknown,ActionsType>\r\nexport const getProfile = (profileId:number):ThunkType => async (dispatch) => {\r\n    let response = await profileAPI.getProfile(profileId)\r\n      dispatch(setUserProfile(response));\r\n    }\r\nexport const getStatus = (profileId:number):ThunkType => async (dispatch) => {\r\n    let response = await profileAPI.getStatus(profileId)\r\n        dispatch(setStatus(response));\r\n}\r\nexport const updateStatus = (status:string):ThunkType => async (dispatch) => {\r\n    try {\r\n      let response = await profileAPI.updateStatus(status)\r\n      if(response.resultCode === 0) {\r\n        dispatch(setStatus(status));\r\n      }\r\n    } catch(error) {\r\n      dispatch(setError(error.messages[0]));\r\n    }\r\n  }\r\nexport const savePhoto = (file:any):ThunkType => async (dispatch) => {\r\n  let response = await profileAPI.savePhoto(file)\r\n      if(response.resultCode === 0) {\r\n        dispatch(savePhotoSuccess(response.data.photos));\r\n      }\r\n  }\r\nexport const saveProfile = (profile:ProfileType):ThunkType => async (dispatch,getState) => {\r\n  const userId = getState().auth.userId\r\n  let response = await profileAPI.saveProfile(profile)\r\n      if(response.resultCode === 0) {\r\n       dispatch(getProfile(userId));\r\n      } else {\r\n        dispatch(stopSubmit('edit-profile',{_error:response.messages[0]}))\r\n        return Promise.reject(response.messages[0])\r\n      }\r\n  }\r\nexport default profileReducer;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}