{"ast":null,"code":"import { tableAPI } from \"../api/tables/tables-api\";\nconst SET_NEW_TABLE = 'SET_NEW_TABLE';\nconst UPDATE_TABLE = 'UPDATE_TABLE';\nconst SET_TABLES = \"SET_TABLES\";\nconst SET_FETCH_PROGRESS = \"SET_FETCH_PROGRESS\";\nconst initialState = {\n  tables: [],\n  progress: true\n};\nconst tablesReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case SET_TABLES:\n      {\n        return {\n          ...state,\n          tables: action.tables\n        };\n      }\n    case SET_NEW_TABLE:\n      {\n        return {\n          ...state,\n          tables: [...state.tables, action.table]\n        };\n      }\n    case UPDATE_TABLE:\n      {\n        const updatedTables = state.tables.map(table => {\n          if (table._id === action.table._id) {\n            return action.table;\n          }\n          return table;\n        });\n        return {\n          ...state,\n          tables: updatedTables\n        };\n      }\n    default:\n      {\n        return state;\n      }\n  }\n};\nexport const actions = {\n  setTables: tables => ({\n    type: SET_TABLES,\n    tables\n  }),\n  setNewTable: table => ({\n    type: SET_NEW_TABLE,\n    table\n  }),\n  fetchProgress: progress => ({\n    type: SET_FETCH_PROGRESS,\n    progress: progress\n  }),\n  updateTable: table => ({\n    type: UPDATE_TABLE,\n    table\n  })\n};\nexport const getTables = () => async dispatch => {\n  dispatch(actions.fetchProgress(false));\n  let response = await tableAPI.getTables();\n  if (response.status === 200) {\n    dispatch(actions.setTables(response.data));\n  }\n  dispatch(actions.fetchProgress(true));\n};\nexport const createNewTable = _ref => {\n  let {\n    items,\n    days,\n    data\n  } = _ref;\n  return async dispatch => {\n    let response = await tableAPI.createTable({\n      items,\n      days,\n      data\n    });\n    if (response.status === 200) {\n      dispatch(actions.setNewTable(response.data));\n    }\n  };\n};\nexport default tablesReducer;","map":{"version":3,"names":["tableAPI","SET_NEW_TABLE","UPDATE_TABLE","SET_TABLES","SET_FETCH_PROGRESS","initialState","tables","progress","tablesReducer","state","action","type","table","updatedTables","map","_id","actions","setTables","setNewTable","fetchProgress","updateTable","getTables","dispatch","response","status","data","createNewTable","items","days","createTable"],"sources":["C:/Dev/react/Schedule for the day/client/src/redux/tables-reducer.ts"],"sourcesContent":["import React from \"react\"\r\nimport { tableAPI } from \"../api/tables/tables-api\"\r\nimport { BaseThunkType, InferActionsType } from \"./redux-store\"\r\n\r\nconst SET_NEW_TABLE = 'SET_NEW_TABLE'\r\nconst UPDATE_TABLE = 'UPDATE_TABLE'\r\nconst SET_TABLES = \"SET_TABLES\"\r\nconst SET_FETCH_PROGRESS = \"SET_FETCH_PROGRESS\"\r\n\r\n\r\ntype ActionsType = InferActionsType<typeof actions>\r\ntype InitialStateType = typeof initialState\r\nexport type ThunkType = BaseThunkType<ActionsType>\r\n\r\nexport type tableFullType = {\r\n    tableData:tableType\r\n    title:string\r\n    __v:number\r\n    _id:string\r\n}\r\nexport type tableType = {\r\n    items:Array<string>\r\n    days:Array<string | number | undefined>\r\n    data:Array<dataType>\r\n}\r\nexport type dataType = {\r\n    name:string\r\n    status: Array<string>\r\n}\r\n\r\nconst initialState = {\r\n    tables:[] as Array<tableFullType>,\r\n    progress:true\r\n}\r\n\r\nconst tablesReducer = (state:InitialStateType = initialState, action:ActionsType):InitialStateType => {\r\n    switch(action.type) {\r\n        case SET_TABLES : {\r\n            return {\r\n                ...state,\r\n                tables:action.tables\r\n            }\r\n        } \r\n        case SET_NEW_TABLE : {\r\n            return {\r\n                ...state,\r\n                tables:[...state.tables,action.table]\r\n            }\r\n        } \r\n        case UPDATE_TABLE: {\r\n            const updatedTables:Array<tableFullType> = state.tables.map((table) => {\r\n                if (table._id === action.table._id) {\r\n                    return action.table;\r\n                }\r\n                return table;\r\n            });\r\n            return {\r\n                ...state,\r\n                tables: updatedTables,\r\n            };\r\n        }\r\n        default : {\r\n            return state\r\n        }\r\n    }\r\n}\r\nexport const actions = {\r\n    setTables:(tables:Array<tableFullType>) => ({type:SET_TABLES,tables}),\r\n    setNewTable:(table:tableFullType) => ({type:SET_NEW_TABLE,table}),\r\n    fetchProgress:(progress:boolean) => ({type:SET_FETCH_PROGRESS,progress:progress}),\r\n    updateTable: (table:tableFullType) => ({type: UPDATE_TABLE,table})\r\n}\r\n\r\n\r\nexport const getTables = ():ThunkType => async (dispatch) => {\r\n    dispatch(actions.fetchProgress(false))\r\n    let response = await tableAPI.getTables()\r\n    if(response.status === 200) {\r\n        dispatch(actions.setTables(response.data))\r\n    }\r\n    dispatch(actions.fetchProgress(true))\r\n}\r\nexport const createNewTable = ({items,days,data}):ThunkType => async (dispatch) => {\r\n    let response = await tableAPI.createTable({items,days,data});\r\n    if(response.status === 200) {\r\n        dispatch(actions.setNewTable(response.data))\r\n    }\r\n}\r\n\r\nexport default tablesReducer"],"mappings":"AACA,SAASA,QAAQ,QAAQ,0BAA0B;AAGnD,MAAMC,aAAa,GAAG,eAAe;AACrC,MAAMC,YAAY,GAAG,cAAc;AACnC,MAAMC,UAAU,GAAG,YAAY;AAC/B,MAAMC,kBAAkB,GAAG,oBAAoB;AAuB/C,MAAMC,YAAY,GAAG;EACjBC,MAAM,EAAC,EAA0B;EACjCC,QAAQ,EAAC;AACb,CAAC;AAED,MAAMC,aAAa,GAAG,YAAgF;EAAA,IAA/EC,KAAsB,uEAAGJ,YAAY;EAAA,IAAEK,MAAkB;EAC5E,QAAOA,MAAM,CAACC,IAAI;IACd,KAAKR,UAAU;MAAG;QACd,OAAO;UACH,GAAGM,KAAK;UACRH,MAAM,EAACI,MAAM,CAACJ;QAClB,CAAC;MACL;IACA,KAAKL,aAAa;MAAG;QACjB,OAAO;UACH,GAAGQ,KAAK;UACRH,MAAM,EAAC,CAAC,GAAGG,KAAK,CAACH,MAAM,EAACI,MAAM,CAACE,KAAK;QACxC,CAAC;MACL;IACA,KAAKV,YAAY;MAAE;QACf,MAAMW,aAAkC,GAAGJ,KAAK,CAACH,MAAM,CAACQ,GAAG,CAAEF,KAAK,IAAK;UACnE,IAAIA,KAAK,CAACG,GAAG,KAAKL,MAAM,CAACE,KAAK,CAACG,GAAG,EAAE;YAChC,OAAOL,MAAM,CAACE,KAAK;UACvB;UACA,OAAOA,KAAK;QAChB,CAAC,CAAC;QACF,OAAO;UACH,GAAGH,KAAK;UACRH,MAAM,EAAEO;QACZ,CAAC;MACL;IACA;MAAU;QACN,OAAOJ,KAAK;MAChB;EAAC;AAET,CAAC;AACD,OAAO,MAAMO,OAAO,GAAG;EACnBC,SAAS,EAAEX,MAA2B,KAAM;IAACK,IAAI,EAACR,UAAU;IAACG;EAAM,CAAC,CAAC;EACrEY,WAAW,EAAEN,KAAmB,KAAM;IAACD,IAAI,EAACV,aAAa;IAACW;EAAK,CAAC,CAAC;EACjEO,aAAa,EAAEZ,QAAgB,KAAM;IAACI,IAAI,EAACP,kBAAkB;IAACG,QAAQ,EAACA;EAAQ,CAAC,CAAC;EACjFa,WAAW,EAAGR,KAAmB,KAAM;IAACD,IAAI,EAAET,YAAY;IAACU;EAAK,CAAC;AACrE,CAAC;AAGD,OAAO,MAAMS,SAAS,GAAG,MAAgB,MAAOC,QAAQ,IAAK;EACzDA,QAAQ,CAACN,OAAO,CAACG,aAAa,CAAC,KAAK,CAAC,CAAC;EACtC,IAAII,QAAQ,GAAG,MAAMvB,QAAQ,CAACqB,SAAS,EAAE;EACzC,IAAGE,QAAQ,CAACC,MAAM,KAAK,GAAG,EAAE;IACxBF,QAAQ,CAACN,OAAO,CAACC,SAAS,CAACM,QAAQ,CAACE,IAAI,CAAC,CAAC;EAC9C;EACAH,QAAQ,CAACN,OAAO,CAACG,aAAa,CAAC,IAAI,CAAC,CAAC;AACzC,CAAC;AACD,OAAO,MAAMO,cAAc,GAAG;EAAA,IAAC;IAACC,KAAK;IAACC,IAAI;IAACH;EAAI,CAAC;EAAA,OAAe,MAAOH,QAAQ,IAAK;IAC/E,IAAIC,QAAQ,GAAG,MAAMvB,QAAQ,CAAC6B,WAAW,CAAC;MAACF,KAAK;MAACC,IAAI;MAACH;IAAI,CAAC,CAAC;IAC5D,IAAGF,QAAQ,CAACC,MAAM,KAAK,GAAG,EAAE;MACxBF,QAAQ,CAACN,OAAO,CAACE,WAAW,CAACK,QAAQ,CAACE,IAAI,CAAC,CAAC;IAChD;EACJ,CAAC;AAAA;AAED,eAAejB,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}