{"ast":null,"code":"const SET_NEW_TABLE = 'SET_NEW_TABLE';\nconst initialState = {\n  tables: []\n};\nconst tablesReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case SET_NEW_TABLE:\n      {\n        let newTable = {\n          id: э1,\n          name: `Table`,\n          tableData: {\n            items: action.table.items,\n            days: action.table.days\n          }\n        };\n        let prewiousTable = state.tables[state.tables.length - 1] || null;\n        if (prewiousTable !== null) {\n          newTable.id = String(prewiousTable.id + 1);\n        }\n        return {\n          ...state,\n          tables: [...state.tables, newTable]\n        };\n      }\n    default:\n      {\n        return state;\n      }\n  }\n};\nexport const actions = {\n  setNewTable: table => ({\n    type: SET_NEW_TABLE,\n    table\n  })\n};\nexport default tablesReducer;","map":{"version":3,"names":["SET_NEW_TABLE","initialState","tables","tablesReducer","state","action","type","newTable","id","э1","name","tableData","items","table","days","prewiousTable","length","String","actions","setNewTable"],"sources":["C:/Dev/react/Schedule for the day/src/redux/tables-reducer.ts"],"sourcesContent":["import { InferActionsType } from \"./redux-store.ts\"\r\n\r\nconst SET_NEW_TABLE = 'SET_NEW_TABLE'\r\n\r\ntype ActionsType = InferActionsType<typeof actions>\r\ntype InitialStateType = typeof initialState\r\n\r\nconst initialState = {\r\n    tables:[] as Array<any>\r\n}\r\n\r\nconst tablesReducer = (state:InitialStateType = initialState, action:ActionsType):InitialStateType => {\r\n    switch(action.type) {\r\n        case SET_NEW_TABLE : {\r\n            let newTable = {\r\n                id:э1,\r\n                name: `Table`,\r\n                tableData:{\r\n                    items:action.table.items,\r\n                    days:action.table.days\r\n                }\r\n            }\r\n            let prewiousTable = state.tables[state.tables.length - 1] || null\r\n            if(prewiousTable !== null) {\r\n                newTable.id = String(prewiousTable.id + 1)\r\n            }\r\n            return {\r\n                ...state,\r\n                tables:[...state.tables,newTable]\r\n            }\r\n        }\r\n        default : {\r\n            return state\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const actions = {\r\n    setNewTable:(table:any) => ({type:SET_NEW_TABLE,table})\r\n}\r\n\r\nexport default tablesReducer"],"mappings":"AAEA,MAAMA,aAAa,GAAG,eAAe;AAKrC,MAAMC,YAAY,GAAG;EACjBC,MAAM,EAAC;AACX,CAAC;AAED,MAAMC,aAAa,GAAG,YAAgF;EAAA,IAA/EC,KAAsB,uEAAGH,YAAY;EAAA,IAAEI,MAAkB;EAC5E,QAAOA,MAAM,CAACC,IAAI;IACd,KAAKN,aAAa;MAAG;QACjB,IAAIO,QAAQ,GAAG;UACXC,EAAE,EAACC,EAAE;UACLC,IAAI,EAAG,OAAM;UACbC,SAAS,EAAC;YACNC,KAAK,EAACP,MAAM,CAACQ,KAAK,CAACD,KAAK;YACxBE,IAAI,EAACT,MAAM,CAACQ,KAAK,CAACC;UACtB;QACJ,CAAC;QACD,IAAIC,aAAa,GAAGX,KAAK,CAACF,MAAM,CAACE,KAAK,CAACF,MAAM,CAACc,MAAM,GAAG,CAAC,CAAC,IAAI,IAAI;QACjE,IAAGD,aAAa,KAAK,IAAI,EAAE;UACvBR,QAAQ,CAACC,EAAE,GAAGS,MAAM,CAACF,aAAa,CAACP,EAAE,GAAG,CAAC,CAAC;QAC9C;QACA,OAAO;UACH,GAAGJ,KAAK;UACRF,MAAM,EAAC,CAAC,GAAGE,KAAK,CAACF,MAAM,EAACK,QAAQ;QACpC,CAAC;MACL;IACA;MAAU;QACN,OAAOH,KAAK;MAChB;EAAC;AAET,CAAC;AAID,OAAO,MAAMc,OAAO,GAAG;EACnBC,WAAW,EAAEN,KAAS,KAAM;IAACP,IAAI,EAACN,aAAa;IAACa;EAAK,CAAC;AAC1D,CAAC;AAED,eAAeV,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}