{"ast":null,"code":"import { tableAPI } from \"../api/tables/tables-api\";\nconst SET_NEW_TABLE = 'SET_NEW_TABLE';\nconst UPDATE_TABLE = 'UPDATE_TABLE';\nconst initialState = {\n  tables: []\n};\nconst tablesReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case SET_NEW_TABLE:\n      {\n        return {\n          ...state,\n          tables: [...state.tables, action.table]\n        };\n      }\n    case UPDATE_TABLE:\n      {\n        const updatedTables = state.tables.map(table => {\n          if (table._id === action.table._id) {\n            return action.table;\n          }\n          return table;\n        });\n        return {\n          ...state,\n          tables: updatedTables\n        };\n      }\n    default:\n      {\n        return state;\n      }\n  }\n};\nexport const actions = {\n  setNewTable: table => ({\n    type: SET_NEW_TABLE,\n    table\n  }),\n  updateTable: table => ({\n    type: UPDATE_TABLE,\n    table\n  })\n};\nexport const createNewTable = _ref => {\n  let {\n    items,\n    days,\n    tableData\n  } = _ref;\n  return async dispatch => {\n    debugger;\n    let response = await tableAPI.createTable({\n      items,\n      days,\n      tableData\n    });\n    debugger;\n    if (response.status === 200) {\n      dispatch(actions.setNewTable(response.data));\n    }\n  };\n};\nexport default tablesReducer;","map":{"version":3,"names":["tableAPI","SET_NEW_TABLE","UPDATE_TABLE","initialState","tables","tablesReducer","state","action","type","table","updatedTables","map","_id","actions","setNewTable","updateTable","createNewTable","items","days","tableData","dispatch","response","createTable","status","data"],"sources":["C:/Dev/react/Schedule for the day/client/src/redux/tables-reducer.ts"],"sourcesContent":["import React from \"react\"\r\nimport { tableAPI } from \"../api/tables/tables-api\"\r\nimport { BaseThunkType, InferActionsType } from \"./redux-store\"\r\n\r\nconst SET_NEW_TABLE = 'SET_NEW_TABLE'\r\nconst UPDATE_TABLE = 'UPDATE_TABLE'\r\n\r\ntype ActionsType = InferActionsType<typeof actions>\r\ntype InitialStateType = typeof initialState\r\nexport type ThunkType = BaseThunkType<ActionsType>\r\n\r\nexport type tableFullType = {\r\n    tableData:tableType\r\n    title:string\r\n    __v:number\r\n    _id:string\r\n}\r\nexport type tableType = {\r\n    items:Array<string>\r\n    days:Array<string | number | undefined>\r\n    tableData:Array<dataType>\r\n}\r\nexport type dataType = {\r\n    name:string\r\n    status: Array<string>\r\n}\r\n\r\nconst initialState = {\r\n    tables:[] as Array<tableFullType>\r\n}\r\n\r\nconst tablesReducer = (state:InitialStateType = initialState, action:ActionsType):InitialStateType => {\r\n    switch(action.type) {\r\n        case SET_NEW_TABLE : {\r\n            return {\r\n                ...state,\r\n                tables:[...state.tables,action.table]\r\n            }\r\n        } \r\n        case UPDATE_TABLE: {\r\n            const updatedTables:Array<tableFullType> = state.tables.map((table) => {\r\n                if (table._id === action.table._id) {\r\n                    return action.table;\r\n                }\r\n                return table;\r\n            });\r\n            return {\r\n                ...state,\r\n                tables: updatedTables,\r\n            };\r\n        }\r\n        default : {\r\n            return state\r\n        }\r\n    }\r\n}\r\nexport const actions = {\r\n    setNewTable:(table:tableType) => ({type:SET_NEW_TABLE,table}),\r\n    updateTable: (table:tableType) => ({type: UPDATE_TABLE,table})\r\n}\r\n\r\n\r\nexport const createNewTable = ({items,days,tableData}):ThunkType => async (dispatch) => {\r\n    debugger\r\n    let response = await tableAPI.createTable({items,days,tableData});\r\n    debugger\r\n    if(response.status === 200) {\r\n        dispatch(actions.setNewTable(response.data))\r\n    }\r\n}\r\n\r\nexport default tablesReducer"],"mappings":"AACA,SAASA,QAAQ,QAAQ,0BAA0B;AAGnD,MAAMC,aAAa,GAAG,eAAe;AACrC,MAAMC,YAAY,GAAG,cAAc;AAsBnC,MAAMC,YAAY,GAAG;EACjBC,MAAM,EAAC;AACX,CAAC;AAED,MAAMC,aAAa,GAAG,YAAgF;EAAA,IAA/EC,KAAsB,uEAAGH,YAAY;EAAA,IAAEI,MAAkB;EAC5E,QAAOA,MAAM,CAACC,IAAI;IACd,KAAKP,aAAa;MAAG;QACjB,OAAO;UACH,GAAGK,KAAK;UACRF,MAAM,EAAC,CAAC,GAAGE,KAAK,CAACF,MAAM,EAACG,MAAM,CAACE,KAAK;QACxC,CAAC;MACL;IACA,KAAKP,YAAY;MAAE;QACf,MAAMQ,aAAkC,GAAGJ,KAAK,CAACF,MAAM,CAACO,GAAG,CAAEF,KAAK,IAAK;UACnE,IAAIA,KAAK,CAACG,GAAG,KAAKL,MAAM,CAACE,KAAK,CAACG,GAAG,EAAE;YAChC,OAAOL,MAAM,CAACE,KAAK;UACvB;UACA,OAAOA,KAAK;QAChB,CAAC,CAAC;QACF,OAAO;UACH,GAAGH,KAAK;UACRF,MAAM,EAAEM;QACZ,CAAC;MACL;IACA;MAAU;QACN,OAAOJ,KAAK;MAChB;EAAC;AAET,CAAC;AACD,OAAO,MAAMO,OAAO,GAAG;EACnBC,WAAW,EAAEL,KAAe,KAAM;IAACD,IAAI,EAACP,aAAa;IAACQ;EAAK,CAAC,CAAC;EAC7DM,WAAW,EAAGN,KAAe,KAAM;IAACD,IAAI,EAAEN,YAAY;IAACO;EAAK,CAAC;AACjE,CAAC;AAGD,OAAO,MAAMO,cAAc,GAAG;EAAA,IAAC;IAACC,KAAK;IAACC,IAAI;IAACC;EAAS,CAAC;EAAA,OAAe,MAAOC,QAAQ,IAAK;IACpF;IACA,IAAIC,QAAQ,GAAG,MAAMrB,QAAQ,CAACsB,WAAW,CAAC;MAACL,KAAK;MAACC,IAAI;MAACC;IAAS,CAAC,CAAC;IACjE;IACA,IAAGE,QAAQ,CAACE,MAAM,KAAK,GAAG,EAAE;MACxBH,QAAQ,CAACP,OAAO,CAACC,WAAW,CAACO,QAAQ,CAACG,IAAI,CAAC,CAAC;IAChD;EACJ,CAAC;AAAA;AAED,eAAenB,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}