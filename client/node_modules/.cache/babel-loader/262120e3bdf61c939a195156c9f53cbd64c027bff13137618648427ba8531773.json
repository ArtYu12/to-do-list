{"ast":null,"code":"import { Todos } from \"../api/todos/todo-api.ts\";\nconst SET_NEW_TODO = 'SET_NEW_PURPOSE';\nconst DELETE_TODO = 'DELETE_PURPOSE';\nconst SET_STATUS_TODO = 'SET_STATUS_TODO';\nconst SET_FOLOWWING_PROGRESS = 'SET_FOLOWWING_PROGRESS';\nconst initialState = {\n  todos: [],\n  progress: false\n};\nconst planReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case SET_NEW_TODO:\n      {\n        return {\n          ...state,\n          todos: [action.todo, ...state.todos]\n        };\n      }\n    case DELETE_TODO:\n      {\n        return {\n          ...state,\n          todos: state.todos.filter(item => item.id != action.todoId)\n        };\n      }\n    case SET_STATUS_TODO:\n      {\n        return {\n          ...state,\n          todos: state.todos.filter(todo => {\n            if (todo.id === action.todoId) {\n              todo.completed = !todo.completed;\n            }\n            return todo;\n          })\n        };\n      }\n    case SET_FOLOWWING_PROGRESS:\n      {\n        return {\n          ...state\n        };\n      }\n    default:\n      {\n        return state;\n      }\n  }\n};\nexport const actions = {\n  setNewTodo: todo => ({\n    type: SET_NEW_TODO,\n    todo\n  }),\n  deleteTodo: todoId => ({\n    type: DELETE_TODO,\n    todoId\n  }),\n  setStatus: todoId => ({\n    type: SET_STATUS_TODO,\n    todoId\n  }),\n  followingProgress: progress => ({\n    type: SET_FOLOWWING_PROGRESS,\n    progress\n  })\n};\nexport const getTodos = () => async dispatch => {\n  let resonse = await Todos.getTodos();\n  if (resonse.status === 1) {\n    resonse.data.map(todo => {\n      dispatch(actions.setNewTodo(todo));\n    });\n  }\n};\nexport default planReducer;","map":{"version":3,"names":["Todos","SET_NEW_TODO","DELETE_TODO","SET_STATUS_TODO","SET_FOLOWWING_PROGRESS","initialState","todos","progress","planReducer","state","action","type","todo","filter","item","id","todoId","completed","actions","setNewTodo","deleteTodo","setStatus","followingProgress","getTodos","dispatch","resonse","status","data","map"],"sources":["C:/Dev/react/Schedule for the day/client/src/redux/plan-reducer.ts"],"sourcesContent":["import { Todos } from \"../api/todos/todo-api.ts\"\r\nimport { Todo } from \"../components/planPage/types/types.ts\"\r\nimport { InferActionsType } from \"./redux-store.ts\"\r\n\r\ntype ActionsType = InferActionsType<typeof actions>\r\ntype InitialStateType = typeof initialState\r\n\r\nconst SET_NEW_TODO = 'SET_NEW_PURPOSE'\r\nconst DELETE_TODO = 'DELETE_PURPOSE'\r\nconst SET_STATUS_TODO = 'SET_STATUS_TODO'\r\nconst SET_FOLOWWING_PROGRESS = 'SET_FOLOWWING_PROGRESS'\r\n\r\nconst initialState = {\r\n    todos:[] as Array<Todo>,\r\n    progress:false\r\n}\r\n\r\nconst planReducer = (state:InitialStateType = initialState,action:ActionsType):InitialStateType => {\r\n    switch(action.type) {\r\n        case SET_NEW_TODO : {\r\n            return { ...state,\r\n                todos:[action.todo,...state.todos]\r\n            }\r\n        }\r\n        case DELETE_TODO : {\r\n            return {\r\n                ...state,\r\n                todos:state.todos.filter((item) => item.id != action.todoId)\r\n            }\r\n        }\r\n        case SET_STATUS_TODO : {\r\n            return {\r\n                ...state,\r\n                todos:state.todos.filter((todo) => {\r\n                    if(todo.id === action.todoId) {\r\n                        todo.completed = !todo.completed\r\n                    }\r\n                    return todo\r\n                })\r\n            }\r\n        }\r\n        case SET_FOLOWWING_PROGRESS : {\r\n            return {\r\n                ...state,\r\n                \r\n            }\r\n        }\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    setNewTodo:(todo:Todo) => ({type:SET_NEW_TODO,todo}),\r\n    deleteTodo:(todoId:number) => ({type:DELETE_TODO,todoId}),\r\n    setStatus:(todoId:number) => ({type:SET_STATUS_TODO,todoId}),\r\n    followingProgress:(progress:boolean) => ({type:SET_FOLOWWING_PROGRESS,progress}),\r\n}\r\n\r\nexport const getTodos = () => async (dispatch) => {\r\n    let resonse = await Todos.getTodos()\r\n    if(resonse.status === 1) {\r\n        resonse.data.map((todo:Todo) => {\r\n            dispatch(actions.setNewTodo(todo))\r\n        }) \r\n    }\r\n}\r\nexport default planReducer"],"mappings":"AAAA,SAASA,KAAK,QAAQ,0BAA0B;AAOhD,MAAMC,YAAY,GAAG,iBAAiB;AACtC,MAAMC,WAAW,GAAG,gBAAgB;AACpC,MAAMC,eAAe,GAAG,iBAAiB;AACzC,MAAMC,sBAAsB,GAAG,wBAAwB;AAEvD,MAAMC,YAAY,GAAG;EACjBC,KAAK,EAAC,EAAiB;EACvBC,QAAQ,EAAC;AACb,CAAC;AAED,MAAMC,WAAW,GAAG,YAA+E;EAAA,IAA9EC,KAAsB,uEAAGJ,YAAY;EAAA,IAACK,MAAkB;EACzE,QAAOA,MAAM,CAACC,IAAI;IACd,KAAKV,YAAY;MAAG;QAChB,OAAO;UAAE,GAAGQ,KAAK;UACbH,KAAK,EAAC,CAACI,MAAM,CAACE,IAAI,EAAC,GAAGH,KAAK,CAACH,KAAK;QACrC,CAAC;MACL;IACA,KAAKJ,WAAW;MAAG;QACf,OAAO;UACH,GAAGO,KAAK;UACRH,KAAK,EAACG,KAAK,CAACH,KAAK,CAACO,MAAM,CAAEC,IAAI,IAAKA,IAAI,CAACC,EAAE,IAAIL,MAAM,CAACM,MAAM;QAC/D,CAAC;MACL;IACA,KAAKb,eAAe;MAAG;QACnB,OAAO;UACH,GAAGM,KAAK;UACRH,KAAK,EAACG,KAAK,CAACH,KAAK,CAACO,MAAM,CAAED,IAAI,IAAK;YAC/B,IAAGA,IAAI,CAACG,EAAE,KAAKL,MAAM,CAACM,MAAM,EAAE;cAC1BJ,IAAI,CAACK,SAAS,GAAG,CAACL,IAAI,CAACK,SAAS;YACpC;YACA,OAAOL,IAAI;UACf,CAAC;QACL,CAAC;MACL;IACA,KAAKR,sBAAsB;MAAG;QAC1B,OAAO;UACH,GAAGK;QAEP,CAAC;MACL;IACA;MAAS;QACL,OAAOA,KAAK;MAChB;EAAC;AAET,CAAC;AAED,OAAO,MAAMS,OAAO,GAAG;EACnBC,UAAU,EAAEP,IAAS,KAAM;IAACD,IAAI,EAACV,YAAY;IAACW;EAAI,CAAC,CAAC;EACpDQ,UAAU,EAAEJ,MAAa,KAAM;IAACL,IAAI,EAACT,WAAW;IAACc;EAAM,CAAC,CAAC;EACzDK,SAAS,EAAEL,MAAa,KAAM;IAACL,IAAI,EAACR,eAAe;IAACa;EAAM,CAAC,CAAC;EAC5DM,iBAAiB,EAAEf,QAAgB,KAAM;IAACI,IAAI,EAACP,sBAAsB;IAACG;EAAQ,CAAC;AACnF,CAAC;AAED,OAAO,MAAMgB,QAAQ,GAAG,MAAM,MAAOC,QAAQ,IAAK;EAC9C,IAAIC,OAAO,GAAG,MAAMzB,KAAK,CAACuB,QAAQ,EAAE;EACpC,IAAGE,OAAO,CAACC,MAAM,KAAK,CAAC,EAAE;IACrBD,OAAO,CAACE,IAAI,CAACC,GAAG,CAAEhB,IAAS,IAAK;MAC5BY,QAAQ,CAACN,OAAO,CAACC,UAAU,CAACP,IAAI,CAAC,CAAC;IACtC,CAAC,CAAC;EACN;AACJ,CAAC;AACD,eAAeJ,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}