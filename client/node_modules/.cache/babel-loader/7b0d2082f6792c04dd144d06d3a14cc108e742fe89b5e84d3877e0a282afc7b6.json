{"ast":null,"code":"import { tableAPI } from \"api/tables/tables-api\";\nconst SET_TABLE = 'SET_TABLE';\nconst UPDATE_TABLE = 'UPDATE_TABLE';\nconst initialState = {\n  table: {}\n};\nconst tableReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case SET_TABLE:\n      {\n        return {\n          ...state,\n          table: action.table\n        };\n      }\n    case UPDATE_TABLE:\n      {\n        const updatedTables = state.tables.map(table => {\n          if (table._id === action.table._id) {\n            return action.table;\n          }\n          return table;\n        });\n        debugger;\n        return {\n          ...state,\n          tables: updatedTables\n        };\n      }\n    default:\n      {\n        return state;\n      }\n  }\n};\nconst actions = {\n  setTable: table => ({\n    type: SET_TABLE,\n    table\n  }),\n  updateTable: table => ({\n    type: UPDATE_TABLE,\n    table\n  })\n};\nexport const getTable = id => async dispatch => {\n  const response = await tableAPI.getTable(id);\n  if (response.status === 200) {\n    dispatch(actions.setTable(response.data));\n  }\n};\nexport default tableReducer;","map":{"version":3,"names":["tableAPI","SET_TABLE","UPDATE_TABLE","initialState","table","tableReducer","state","action","type","updatedTables","tables","map","_id","actions","setTable","updateTable","getTable","id","dispatch","response","status","data"],"sources":["C:/Dev/react/schedule for the day/client/src/redux/table-reducer.ts"],"sourcesContent":["import { tableAPI } from \"api/tables/tables-api\";\r\nimport { BaseThunkType, InferActionsType } from \"./redux-store\";\r\nimport { tableFullType } from \"./tables-reducer\";\r\n\r\nconst SET_TABLE = 'SET_TABLE'\r\nconst UPDATE_TABLE = 'UPDATE_TABLE'\r\n\r\ntype ActionsType = InferActionsType<typeof actions>\r\ntype InitialStateType = typeof initialState\r\ntype ThunkType = BaseThunkType<ActionsType>\r\n\r\nconst initialState = {\r\n    table:{} as tableFullType\r\n}\r\n\r\nconst tableReducer = (state:InitialStateType = initialState, action:ActionsType):InitialStateType => {\r\n    switch(action.type) {\r\n        case SET_TABLE : {\r\n            return {\r\n                ...state,\r\n                table:action.table\r\n            }\r\n        }\r\n        case UPDATE_TABLE: {\r\n            const updatedTables:Array<tableFullType> = state.tables.map((table) => {\r\n                if (table._id === action.table._id) {\r\n                    return action.table;\r\n                }\r\n                return table;\r\n            });\r\n            debugger\r\n            return {\r\n                ...state,\r\n                tables: updatedTables,\r\n            };\r\n        }\r\n        default : {\r\n            return state\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nconst actions = {\r\n    setTable:(table:tableFullType) => ({type:SET_TABLE,table}),\r\n    updateTable: (table:tableFullType) => ({type: UPDATE_TABLE,table})\r\n}\r\n\r\nexport const getTable = (id:string):ThunkType => async (dispatch) => {\r\n    const response = await tableAPI.getTable(id)\r\n    if(response.status === 200) {\r\n        dispatch(actions.setTable(response.data))\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default tableReducer"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,uBAAuB;AAIhD,MAAMC,SAAS,GAAG,WAAW;AAC7B,MAAMC,YAAY,GAAG,cAAc;AAMnC,MAAMC,YAAY,GAAG;EACjBC,KAAK,EAAC,CAAC;AACX,CAAC;AAED,MAAMC,YAAY,GAAG,YAAgF;EAAA,IAA/EC,KAAsB,uEAAGH,YAAY;EAAA,IAAEI,MAAkB;EAC3E,QAAOA,MAAM,CAACC,IAAI;IACd,KAAKP,SAAS;MAAG;QACb,OAAO;UACH,GAAGK,KAAK;UACRF,KAAK,EAACG,MAAM,CAACH;QACjB,CAAC;MACL;IACA,KAAKF,YAAY;MAAE;QACf,MAAMO,aAAkC,GAAGH,KAAK,CAACI,MAAM,CAACC,GAAG,CAAEP,KAAK,IAAK;UACnE,IAAIA,KAAK,CAACQ,GAAG,KAAKL,MAAM,CAACH,KAAK,CAACQ,GAAG,EAAE;YAChC,OAAOL,MAAM,CAACH,KAAK;UACvB;UACA,OAAOA,KAAK;QAChB,CAAC,CAAC;QACF;QACA,OAAO;UACH,GAAGE,KAAK;UACRI,MAAM,EAAED;QACZ,CAAC;MACL;IACA;MAAU;QACN,OAAOH,KAAK;MAChB;EAAC;AAET,CAAC;AAKD,MAAMO,OAAO,GAAG;EACZC,QAAQ,EAAEV,KAAmB,KAAM;IAACI,IAAI,EAACP,SAAS;IAACG;EAAK,CAAC,CAAC;EAC1DW,WAAW,EAAGX,KAAmB,KAAM;IAACI,IAAI,EAAEN,YAAY;IAACE;EAAK,CAAC;AACrE,CAAC;AAED,OAAO,MAAMY,QAAQ,GAAIC,EAAS,IAAe,MAAOC,QAAQ,IAAK;EACjE,MAAMC,QAAQ,GAAG,MAAMnB,QAAQ,CAACgB,QAAQ,CAACC,EAAE,CAAC;EAC5C,IAAGE,QAAQ,CAACC,MAAM,KAAK,GAAG,EAAE;IACxBF,QAAQ,CAACL,OAAO,CAACC,QAAQ,CAACK,QAAQ,CAACE,IAAI,CAAC,CAAC;EAC7C;AACJ,CAAC;AAID,eAAehB,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}