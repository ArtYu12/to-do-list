{"ast":null,"code":"var _jsxFileName = \"C:\\\\Dev\\\\react\\\\project1\\\\src\\\\hoc\\\\withAuthRedirect.tsx\";\nimport { Navigate } from \"react-router-dom\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet mapStateToPropsForRedirect = state => ({\n  isAuth: state.auth.isAuth\n});\nexport function withAuthRedirect(WrappedComponent) {\n  const RedirectComponent = props => {\n    let {\n      isAuth,\n      ...resProps\n    } = props;\n    if (!isAuth) return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 28\n    }, this);\n    return /*#__PURE__*/_jsxDEV(WrappedComponent, {\n      ...resProps\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 16\n    }, this);\n  };\n  let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect, {\n    fake: () => {}\n  })(RedirectComponent);\n  return ConnectedAuthRedirectComponent;\n}","map":{"version":3,"names":["Navigate","React","connect","mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","WrappedComponent","RedirectComponent","props","resProps","ConnectedAuthRedirectComponent","fake"],"sources":["C:/Dev/react/project1/src/hoc/withAuthRedirect.tsx"],"sourcesContent":["import { Navigate } from \"react-router-dom\";\r\nimport React from 'react';\r\nimport {connect}  from 'react-redux';\r\nimport { AppStateType } from \"../redux/redux-store\";\r\n\r\nlet mapStateToPropsForRedirect = (state:AppStateType) => ({\r\n    isAuth:state.auth.isAuth\r\n});\r\ntype MapPropsType = {\r\n    isAuth:boolean\r\n}\r\ntype DispacthPropsType = {\r\n    fake:() => void\r\n}\r\nexport function withAuthRedirect<WCP extends JSX.IntrinsicAttributes>(WrappedComponent:React.ComponentType<WCP> ) {\r\n    const RedirectComponent:React.FC<DispacthPropsType & MapPropsType> = (props) => {\r\n        let {isAuth,...resProps} = props\r\n        if(!isAuth) return <Navigate to='/login' />\r\n        return <WrappedComponent {...resProps as WCP} />\r\n    }\r\n    let ConnectedAuthRedirectComponent = connect<MapPropsType,WCP,AppStateType>(mapStateToPropsForRedirect,{fake:() => {}})(RedirectComponent);\r\n    return ConnectedAuthRedirectComponent;\r\n}"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,kBAAkB;AAC3C,OAAOC,KAAK,MAAM,OAAO;AACzB,SAAQC,OAAO,QAAQ,aAAa;AAAC;AAGrC,IAAIC,0BAA0B,GAAIC,KAAkB,KAAM;EACtDC,MAAM,EAACD,KAAK,CAACE,IAAI,CAACD;AACtB,CAAC,CAAC;AAOF,OAAO,SAASE,gBAAgB,CAAsCC,gBAAyC,EAAG;EAC9G,MAAMC,iBAA4D,GAAIC,KAAK,IAAK;IAC5E,IAAI;MAACL,MAAM;MAAC,GAAGM;IAAQ,CAAC,GAAGD,KAAK;IAChC,IAAG,CAACL,MAAM,EAAE,oBAAO,QAAC,QAAQ;MAAC,EAAE,EAAC;IAAQ;MAAA;MAAA;MAAA;IAAA,QAAG;IAC3C,oBAAO,QAAC,gBAAgB;MAAA,GAAKM;IAAQ;MAAA;MAAA;MAAA;IAAA,QAAW;EACpD,CAAC;EACD,IAAIC,8BAA8B,GAAGV,OAAO,CAAgCC,0BAA0B,EAAC;IAACU,IAAI,EAAC,MAAM,CAAC;EAAC,CAAC,CAAC,CAACJ,iBAAiB,CAAC;EAC1I,OAAOG,8BAA8B;AACzC"},"metadata":{},"sourceType":"module","externalDependencies":[]}