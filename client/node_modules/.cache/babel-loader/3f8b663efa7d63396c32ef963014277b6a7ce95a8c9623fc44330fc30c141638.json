{"ast":null,"code":"var _jsxFileName = \"C:\\\\Dev\\\\react\\\\project1\\\\src\\\\components\\\\users\\\\UsersContainer.tsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport Users from './Users.tsx';\nimport Preloader from '../common/preloader/Preloader.tsx';\nimport { getIsFetching } from '../../redux/users-selectors.ts';\nimport { useSelector } from 'react-redux';\n/*\r\ntype MapStateToPropsType = {\r\n    currentPage:number\r\n    pageSize:number\r\n    isFetching:boolean\r\n    totalUsersCount:number\r\n    folowingInProgress:Array<number>\r\n    users:Array<UserType>\r\n    filter:SearchFilterType\r\n}\r\ntype MapDispatchToPropsType = {\r\n    Unfollow:(userId:number) => void\r\n    Follow:(userId:number) => void\r\n    getUsers:(currentPage:number,pageSize:number,filter:SearchFilterType) => void\r\n}\r\n*/\n//type PropsType = MapDispatchToPropsType & MapStateToPropsType & OwnPropsType\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UsersPage = props => {\n  _s();\n  const isFetching = useSelector(getIsFetching);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [isFetching ? /*#__PURE__*/_jsxDEV(Preloader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 17\n    }, this) : null, /*#__PURE__*/_jsxDEV(Users, {\n      h: props.h\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n_s(UsersPage, \"EWfGxLGk6vKbEvoeNKHSzkRBjvI=\", false, function () {\n  return [useSelector];\n});\n_c = UsersPage;\nexport default UsersPage;\n/*\r\nclass UsersContainer extends React.Component<PropsType> {\r\n    componentDidMount() {\r\n        let {currentPage,pageSize,filter} = this.props\r\n        this.props.getUsers(currentPage,pageSize,filter);\r\n    }\r\n    onPageChanged = (pageNumber:number) => {\r\n        let {pageSize,filter} = this.props\r\n        this.props.getUsers(pageNumber,pageSize,filter);\r\n    }\r\n    onFilterChanged = (filter:SearchFilterType) => {\r\n        let {pageSize} = this.props\r\n        this.props.getUsers(1,pageSize,filter);\r\n    }\r\n    render() {\r\n\r\n        return <>\r\n        {this.props.isFetching?<Preloader/>:null}\r\n            <Users\r\n                /*totalUsersCount={this.props.totalUsersCount}\r\n                pageSize={this.props.pageSize}\r\n                currentPage={this.props.currentPage}\r\n                onPageChanged={this.onPageChanged}\r\n                users={this.props.users}\r\n                onFilterChanged={this.onFilterChanged}\r\n                follow={this.props.follow}\r\n                unfollow={this.props.unfollow}\r\n                h={this.props.h}\r\n                folowingInProgress={this.props.folowingInProgress}\r\n            />\r\n        </>\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        users : state.usersPage.users,\r\n        pageSize: state.usersPage.pageSize,\r\n        totalUsersCount: state.usersPage.totalUsersCount,\r\n        currentPage:state.usersPage.currentPage,\r\n        isFetching:state.usersPage.isFetching,\r\n        folowingInProgress:state.usersPage.folowingInProgress\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state:AppStateType):MapStateToPropsType => {\r\n    return {\r\n        users : getUsersSuperSelector(state),\r\n        pageSize: getPageSize(state),\r\n        totalUsersCount: getTotalUsersCount(state),\r\n        currentPage: getCurrentPage(state),\r\n        isFetching: getIsFetching(state),\r\n        folowingInProgress: getFolowingInProgress(state),\r\n        filter: getFilter(state)\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    connect<MapStateToPropsType,MapDispatchToPropsType,OwnPropsType,AppStateType>(mapStateToProps,{Follow,Unfollow,getUsers}),\r\n)(UsersContainer)\r\n*/\nvar _c;\n$RefreshReg$(_c, \"UsersPage\");","map":{"version":3,"names":["React","Users","Preloader","getIsFetching","useSelector","UsersPage","props","isFetching","h"],"sources":["C:/Dev/react/project1/src/components/users/UsersContainer.tsx"],"sourcesContent":["\r\nimport React from 'react';\r\nimport {Follow,Unfollow,getUsers, SearchFilterType} from '../../redux/users-reducer.ts'\r\nimport {connect}  from 'react-redux'\r\nimport Users from './Users.tsx';\r\nimport Preloader from '../common/preloader/Preloader.tsx';\r\nimport {compose} from 'redux'\r\nimport {UserType} from './../../types/types.ts'\r\nimport {getUsersSuperSelector,getCurrentPage,getFolowingInProgress,getIsFetching,getTotalUsersCount,getPageSize, getFilter} from '../../redux/users-selectors.ts'\r\nimport { AppStateType } from '../../redux/redux-store.js';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n/*\r\ntype MapStateToPropsType = {\r\n    currentPage:number\r\n    pageSize:number\r\n    isFetching:boolean\r\n    totalUsersCount:number\r\n    folowingInProgress:Array<number>\r\n    users:Array<UserType>\r\n    filter:SearchFilterType\r\n}\r\ntype MapDispatchToPropsType = {\r\n    Unfollow:(userId:number) => void\r\n    Follow:(userId:number) => void\r\n    getUsers:(currentPage:number,pageSize:number,filter:SearchFilterType) => void\r\n}\r\n*/\r\n//type PropsType = MapDispatchToPropsType & MapStateToPropsType & OwnPropsType\r\ntype UsersPageType = {}\r\nconst UsersPage:React.FC<UsersPageType & OwnPropsType> = (props) => {\r\n    const isFetching = useSelector(getIsFetching)\r\n    return <>\r\n    {isFetching?<Preloader/>:null}\r\n        <Users h={props.h}/>\r\n    </>\r\n}\r\n\r\nexport default UsersPage\r\n/*\r\nclass UsersContainer extends React.Component<PropsType> {\r\n    componentDidMount() {\r\n        let {currentPage,pageSize,filter} = this.props\r\n        this.props.getUsers(currentPage,pageSize,filter);\r\n    }\r\n    onPageChanged = (pageNumber:number) => {\r\n        let {pageSize,filter} = this.props\r\n        this.props.getUsers(pageNumber,pageSize,filter);\r\n    }\r\n    onFilterChanged = (filter:SearchFilterType) => {\r\n        let {pageSize} = this.props\r\n        this.props.getUsers(1,pageSize,filter);\r\n    }\r\n    render() {\r\n\r\n        return <>\r\n        {this.props.isFetching?<Preloader/>:null}\r\n            <Users\r\n                /*totalUsersCount={this.props.totalUsersCount}\r\n                pageSize={this.props.pageSize}\r\n                currentPage={this.props.currentPage}\r\n                onPageChanged={this.onPageChanged}\r\n                users={this.props.users}\r\n                onFilterChanged={this.onFilterChanged}\r\n                follow={this.props.follow}\r\n                unfollow={this.props.unfollow}\r\n                h={this.props.h}\r\n                folowingInProgress={this.props.folowingInProgress}\r\n            />\r\n        </>\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        users : state.usersPage.users,\r\n        pageSize: state.usersPage.pageSize,\r\n        totalUsersCount: state.usersPage.totalUsersCount,\r\n        currentPage:state.usersPage.currentPage,\r\n        isFetching:state.usersPage.isFetching,\r\n        folowingInProgress:state.usersPage.folowingInProgress\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state:AppStateType):MapStateToPropsType => {\r\n    return {\r\n        users : getUsersSuperSelector(state),\r\n        pageSize: getPageSize(state),\r\n        totalUsersCount: getTotalUsersCount(state),\r\n        currentPage: getCurrentPage(state),\r\n        isFetching: getIsFetching(state),\r\n        folowingInProgress: getFolowingInProgress(state),\r\n        filter: getFilter(state)\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    connect<MapStateToPropsType,MapDispatchToPropsType,OwnPropsType,AppStateType>(mapStateToProps,{Follow,Unfollow,getUsers}),\r\n)(UsersContainer)\r\n*/"],"mappings":";;AACA,OAAOA,KAAK,MAAM,OAAO;AAGzB,OAAOC,KAAK,MAAM,aAAa;AAC/B,OAAOC,SAAS,MAAM,mCAAmC;AAGzD,SAAmEC,aAAa,QAAiD,gCAAgC;AAEjK,SAAsBC,WAAW,QAAQ,aAAa;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA,MAAMC,SAAgD,GAAIC,KAAK,IAAK;EAAA;EAChE,MAAMC,UAAU,GAAGH,WAAW,CAACD,aAAa,CAAC;EAC7C,oBAAO;IAAA,WACNI,UAAU,gBAAC,QAAC,SAAS;MAAA;MAAA;MAAA;IAAA,QAAE,GAAC,IAAI,eACzB,QAAC,KAAK;MAAC,CAAC,EAAED,KAAK,CAACE;IAAE;MAAA;MAAA;MAAA;IAAA,QAAE;EAAA,gBACrB;AACP,CAAC;AAAA,GANKH,SAAgD;EAAA,QAC/BD,WAAW;AAAA;AAAA,KAD5BC,SAAgD;AAQtD,eAAeA,SAAS;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA5DA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}