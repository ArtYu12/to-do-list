{"ast":null,"code":"import { chatAPI } from '../components/api/chat-api.ts';\nconst MESSAGES_RECEVIED = 'SN/chat/MESSAGES_RECEVIED';\nlet initialState = {\n  messages: [],\n  status: 'pending'\n};\nexport const chatReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case MESSAGES_RECEVIED:\n      return {\n        ...state,\n        messages: [...state.messages, ...action.payload]\n      };\n    case MESSAGES_RECEVIED:\n      return {\n        ...state,\n        messages: [...state.messages, ...action.payload]\n      };\n    default:\n      return state;\n  }\n};\nconst actions = {\n  setMessages: messages => ({\n    type: MESSAGES_RECEVIED,\n    payload: messages\n  })\n};\nlet _newMessageHanbler = null;\nconst newMessageHanbler = dispatch => {\n  if (_newMessageHanbler === null) {\n    _newMessageHanbler = messages => {\n      dispatch(actions.setMessages(messages));\n    };\n  }\n  return _newMessageHanbler;\n};\nexport const startMessagesListening = () => async dispatch => {\n  chatAPI.start();\n  chatAPI.subscribe(newMessageHanbler(dispatch));\n};\nexport const stopMessagesListening = () => async dispatch => {\n  chatAPI.unsubscribe(newMessageHanbler(dispatch));\n  chatAPI.stop();\n};\nexport const sendMessage = message => async dispatch => {\n  chatAPI.sendMessage(message);\n};\nexport default chatReducer;","map":{"version":3,"names":["chatAPI","MESSAGES_RECEVIED","initialState","messages","status","chatReducer","state","action","type","payload","actions","setMessages","_newMessageHanbler","newMessageHanbler","dispatch","startMessagesListening","start","subscribe","stopMessagesListening","unsubscribe","stop","sendMessage","message"],"sources":["C:/Dev/react/project1/src/redux/chat-reducer.ts"],"sourcesContent":["import {ChatMessageType, chatAPI} from '../components/api/chat-api.ts'\r\nimport {FormAction} from 'redux-form'\r\nimport { BaseThunkType, InferActionsType } from './redux-store';\r\nimport { Dispatch } from 'redux';\r\n\r\nconst MESSAGES_RECEVIED = 'SN/chat/MESSAGES_RECEVIED'\r\n\r\nlet initialState =  {\r\n    messages:[] as ChatMessageType[],\r\n    status:'pending' as 'pending' | 'ready'\r\n}\r\ntype ActionsType = InferActionsType<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsType | FormAction>\r\n\r\ntype initialState = typeof initialState\r\nexport const chatReducer = (state:initialState = initialState,action:ActionsType):initialState =>{\r\n  switch(action.type) {\r\n    case MESSAGES_RECEVIED: \r\n        return { \r\n            ...state,\r\n            messages:[...state.messages,...action.payload]\r\n        }\r\n        case MESSAGES_RECEVIED: \r\n        return { \r\n            ...state,\r\n            messages:[...state.messages,...action.payload]\r\n        }\r\n    default: \r\n        return state;\r\n  }\r\n}\r\nconst actions = {\r\n  setMessages:(messages:ChatMessageType[]) => ({\r\n    type:MESSAGES_RECEVIED, payload:messages\r\n  })\r\n}\r\nlet _newMessageHanbler:((messages:ChatMessageType[]) => void) | null = null\r\n\r\n\r\n\r\nconst newMessageHanbler = (dispatch:Dispatch) => {\r\n    if(_newMessageHanbler === null) {\r\n      _newMessageHanbler = (messages:ChatMessageType[]) => {\r\n        dispatch(actions.setMessages(messages))\r\n      }\r\n    }\r\n\r\n    return _newMessageHanbler\r\n} \r\nexport const startMessagesListening = ():ThunkType => async (dispatch) => {\r\n  chatAPI.start() \r\n  chatAPI.subscribe(newMessageHanbler(dispatch))\r\n}\r\nexport const stopMessagesListening = ():ThunkType => async (dispatch) => {\r\n    chatAPI.unsubscribe(newMessageHanbler(dispatch))\r\n    chatAPI.stop()\r\n }\r\nexport const sendMessage = (message:string):ThunkType => async (dispatch) => {\r\n  chatAPI.sendMessage(message)\r\n}\r\nexport default chatReducer;"],"mappings":"AAAA,SAAyBA,OAAO,QAAO,+BAA+B;AAKtE,MAAMC,iBAAiB,GAAG,2BAA2B;AAErD,IAAIC,YAAY,GAAI;EAChBC,QAAQ,EAAC,EAAuB;EAChCC,MAAM,EAAC;AACX,CAAC;AAKD,OAAO,MAAMC,WAAW,GAAG,YAAsE;EAAA,IAArEC,KAAkB,uEAAGJ,YAAY;EAAA,IAACK,MAAkB;EAC9E,QAAOA,MAAM,CAACC,IAAI;IAChB,KAAKP,iBAAiB;MAClB,OAAO;QACH,GAAGK,KAAK;QACRH,QAAQ,EAAC,CAAC,GAAGG,KAAK,CAACH,QAAQ,EAAC,GAAGI,MAAM,CAACE,OAAO;MACjD,CAAC;IACD,KAAKR,iBAAiB;MACtB,OAAO;QACH,GAAGK,KAAK;QACRH,QAAQ,EAAC,CAAC,GAAGG,KAAK,CAACH,QAAQ,EAAC,GAAGI,MAAM,CAACE,OAAO;MACjD,CAAC;IACL;MACI,OAAOH,KAAK;EAAC;AAErB,CAAC;AACD,MAAMI,OAAO,GAAG;EACdC,WAAW,EAAER,QAA0B,KAAM;IAC3CK,IAAI,EAACP,iBAAiB;IAAEQ,OAAO,EAACN;EAClC,CAAC;AACH,CAAC;AACD,IAAIS,kBAAgE,GAAG,IAAI;AAI3E,MAAMC,iBAAiB,GAAIC,QAAiB,IAAK;EAC7C,IAAGF,kBAAkB,KAAK,IAAI,EAAE;IAC9BA,kBAAkB,GAAIT,QAA0B,IAAK;MACnDW,QAAQ,CAACJ,OAAO,CAACC,WAAW,CAACR,QAAQ,CAAC,CAAC;IACzC,CAAC;EACH;EAEA,OAAOS,kBAAkB;AAC7B,CAAC;AACD,OAAO,MAAMG,sBAAsB,GAAG,MAAgB,MAAOD,QAAQ,IAAK;EACxEd,OAAO,CAACgB,KAAK,EAAE;EACfhB,OAAO,CAACiB,SAAS,CAACJ,iBAAiB,CAACC,QAAQ,CAAC,CAAC;AAChD,CAAC;AACD,OAAO,MAAMI,qBAAqB,GAAG,MAAgB,MAAOJ,QAAQ,IAAK;EACrEd,OAAO,CAACmB,WAAW,CAACN,iBAAiB,CAACC,QAAQ,CAAC,CAAC;EAChDd,OAAO,CAACoB,IAAI,EAAE;AACjB,CAAC;AACF,OAAO,MAAMC,WAAW,GAAIC,OAAc,IAAe,MAAOR,QAAQ,IAAK;EAC3Ed,OAAO,CAACqB,WAAW,CAACC,OAAO,CAAC;AAC9B,CAAC;AACD,eAAejB,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}