{"ast":null,"code":"import { chatAPI } from '../components/api/chat-api.ts';\nconst MESSAGES_RECEVIED = 'SN/chat/MESSAGES_RECEVIED';\nlet initialState = {\n  messages: []\n};\nexport const chatReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case MESSAGES_RECEVIED:\n      return {\n        ...state,\n        messages: [...state.messages, ...action.payload]\n      };\n    default:\n      return state;\n  }\n};\nconst actions = {\n  setMessages: messages => ({\n    type: MESSAGES_RECEVIED,\n    payload: messages\n  })\n};\nlet _newMessageHanbler = null;\nconst newMessageHanbler = dispatch => {\n  if (_newMessageHanbler === null) {\n    _newMessageHanbler = messages => {\n      dispatch(actions.setMessages(messages));\n    };\n  }\n  return _newMessageHanbler;\n};\nexport const startMessagesListening = () => async dispatch => {\n  chatAPI.subscribe(newMessageHanbler(dispatch));\n};\nexport const stopMessagesListening = () => async dispatch => {\n  chatAPI.unsubscribe(newMessageHanbler(dispatch));\n};\nexport const sendMessage = message => async dispatch => {\n  chatAPI.sendMessage(message);\n};\nexport default chatReducer;","map":{"version":3,"names":["chatAPI","MESSAGES_RECEVIED","initialState","messages","chatReducer","state","action","type","payload","actions","setMessages","_newMessageHanbler","newMessageHanbler","dispatch","startMessagesListening","subscribe","stopMessagesListening","unsubscribe","sendMessage","message"],"sources":["C:/Dev/react/project1/src/redux/chat-reducer.ts"],"sourcesContent":["import {ChatMessageType, chatAPI} from '../components/api/chat-api.ts'\r\nimport {FormAction} from 'redux-form'\r\nimport { BaseThunkType, InferActionsType } from './redux-store';\r\nimport { Dispatch } from 'redux';\r\n\r\nconst MESSAGES_RECEVIED = 'SN/chat/MESSAGES_RECEVIED'\r\n\r\nlet initialState =  {\r\n    messages:[] as ChatMessageType[]\r\n}\r\ntype ActionsType = InferActionsType<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsType | FormAction>\r\n\r\ntype initialState = typeof initialState\r\nexport const chatReducer = (state:initialState = initialState,action:ActionsType):initialState =>{\r\n  switch(action.type) {\r\n    case MESSAGES_RECEVIED: \r\n        return { \r\n            ...state,\r\n            messages:[...state.messages,...action.payload]\r\n        }\r\n    default: \r\n        return state;\r\n  }\r\n}\r\nconst actions = {\r\n  setMessages:(messages:ChatMessageType[]) => ({\r\n    type:MESSAGES_RECEVIED, payload:messages\r\n  })\r\n}\r\nlet _newMessageHanbler:((messages:ChatMessageType[]) => void) | null = null\r\n\r\n\r\n\r\nconst newMessageHanbler = (dispatch:Dispatch) => {\r\n    if(_newMessageHanbler === null) {\r\n      _newMessageHanbler = (messages:ChatMessageType[]) => {\r\n        dispatch(actions.setMessages(messages))\r\n      }\r\n    }\r\n\r\n    return _newMessageHanbler\r\n} \r\nexport const startMessagesListening = ():ThunkType => async (dispatch) => {\r\n   chatAPI.subscribe(newMessageHanbler(dispatch))\r\n}\r\nexport const stopMessagesListening = ():ThunkType => async (dispatch) => {\r\n    chatAPI.unsubscribe(newMessageHanbler(dispatch))\r\n }\r\nexport const sendMessage = (message:string):ThunkType => async (dispatch) => {\r\n  chatAPI.sendMessage(message)\r\n}\r\nexport default chatReducer;"],"mappings":"AAAA,SAAyBA,OAAO,QAAO,+BAA+B;AAKtE,MAAMC,iBAAiB,GAAG,2BAA2B;AAErD,IAAIC,YAAY,GAAI;EAChBC,QAAQ,EAAC;AACb,CAAC;AAKD,OAAO,MAAMC,WAAW,GAAG,YAAsE;EAAA,IAArEC,KAAkB,uEAAGH,YAAY;EAAA,IAACI,MAAkB;EAC9E,QAAOA,MAAM,CAACC,IAAI;IAChB,KAAKN,iBAAiB;MAClB,OAAO;QACH,GAAGI,KAAK;QACRF,QAAQ,EAAC,CAAC,GAAGE,KAAK,CAACF,QAAQ,EAAC,GAAGG,MAAM,CAACE,OAAO;MACjD,CAAC;IACL;MACI,OAAOH,KAAK;EAAC;AAErB,CAAC;AACD,MAAMI,OAAO,GAAG;EACdC,WAAW,EAAEP,QAA0B,KAAM;IAC3CI,IAAI,EAACN,iBAAiB;IAAEO,OAAO,EAACL;EAClC,CAAC;AACH,CAAC;AACD,IAAIQ,kBAAgE,GAAG,IAAI;AAI3E,MAAMC,iBAAiB,GAAIC,QAAiB,IAAK;EAC7C,IAAGF,kBAAkB,KAAK,IAAI,EAAE;IAC9BA,kBAAkB,GAAIR,QAA0B,IAAK;MACnDU,QAAQ,CAACJ,OAAO,CAACC,WAAW,CAACP,QAAQ,CAAC,CAAC;IACzC,CAAC;EACH;EAEA,OAAOQ,kBAAkB;AAC7B,CAAC;AACD,OAAO,MAAMG,sBAAsB,GAAG,MAAgB,MAAOD,QAAQ,IAAK;EACvEb,OAAO,CAACe,SAAS,CAACH,iBAAiB,CAACC,QAAQ,CAAC,CAAC;AACjD,CAAC;AACD,OAAO,MAAMG,qBAAqB,GAAG,MAAgB,MAAOH,QAAQ,IAAK;EACrEb,OAAO,CAACiB,WAAW,CAACL,iBAAiB,CAACC,QAAQ,CAAC,CAAC;AACnD,CAAC;AACF,OAAO,MAAMK,WAAW,GAAIC,OAAc,IAAe,MAAON,QAAQ,IAAK;EAC3Eb,OAAO,CAACkB,WAAW,CAACC,OAAO,CAAC;AAC9B,CAAC;AACD,eAAef,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}