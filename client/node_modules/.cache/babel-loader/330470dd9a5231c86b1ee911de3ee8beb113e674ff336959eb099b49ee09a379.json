{"ast":null,"code":"import { tableAPI, tablesAPI } from \"../api/tables/tables-api\";\nconst SET_NEW_TABLE = 'SET_NEW_TABLE';\n//const UPDATE_TABLE = 'UPDATE_TABLE'\nconst SET_TABLES = \"SET_TABLES\";\nconst SET_FETCH_PROGRESS = \"SET_FETCH_PROGRESS\";\nconst DELETE_TABLE = \"DELETE_TABLE\";\nconst initialState = {\n  tables: [],\n  progress: true\n};\nconst tablesReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case SET_TABLES:\n      {\n        return {\n          ...state,\n          tables: action.tables\n        };\n      }\n    case SET_NEW_TABLE:\n      {\n        return {\n          ...state,\n          tables: [...state.tables, action.table]\n        };\n      }\n    /* case UPDATE_TABLE: {\r\n         debugger\r\n         const updatedTables:Array<tableFullType> = state.tables.map((table) => {\r\n             if (table._id === action.table._id) {\r\n                 return action.table;\r\n             }\r\n             return table;\r\n         });\r\n         debugger\r\n         return {\r\n             ...state,\r\n             tables: updatedTables,\r\n         };\r\n     }*/\n    case SET_FETCH_PROGRESS:\n      {\n        return {\n          ...state,\n          progress: action.progress\n        };\n      }\n    case DELETE_TABLE:\n      {\n        const newTables = state.tables.filter(table => {\n          if (table._id !== action.id) {\n            return false;\n          }\n          return true;\n        });\n        debugger;\n        return {\n          ...state,\n          tables: newTables\n        };\n      }\n    default:\n      {\n        return state;\n      }\n  }\n};\nexport const actions = {\n  setTables: tables => ({\n    type: SET_TABLES,\n    tables\n  }),\n  setNewTable: table => ({\n    type: SET_NEW_TABLE,\n    table\n  }),\n  deleteTable: id => ({\n    type: DELETE_TABLE,\n    id\n  }),\n  fetchProgress: progress => ({\n    type: SET_FETCH_PROGRESS,\n    progress\n  }),\n  updateTable: table => ({\n    type: UPDATE_TABLE,\n    table\n  })\n};\nexport const getTables = () => async dispatch => {\n  dispatch(actions.fetchProgress(false));\n  let response = await tablesAPI.getTables();\n  if (response.status === 200) {\n    dispatch(actions.setTables(response.data));\n  }\n  dispatch(actions.fetchProgress(true));\n};\nexport const createNewTable = _ref => {\n  let {\n    items,\n    days,\n    data\n  } = _ref;\n  return async dispatch => {\n    dispatch(actions.fetchProgress(false));\n    let response = await tableAPI.createTable({\n      items,\n      days,\n      data\n    });\n    if (response.status === 200) {\n      dispatch(actions.setNewTable(response.data));\n    }\n    dispatch(actions.fetchProgress(true));\n  };\n};\nexport const deleteTableById = id => async dispatch => {\n  let response = await tableAPI.deleteTable(id);\n  debugger;\n  if (response.status === 200) {\n    dispatch(actions.deleteTable(id));\n  }\n};\nexport default tablesReducer;","map":{"version":3,"names":["tableAPI","tablesAPI","SET_NEW_TABLE","SET_TABLES","SET_FETCH_PROGRESS","DELETE_TABLE","initialState","tables","progress","tablesReducer","state","action","type","table","newTables","filter","_id","id","actions","setTables","setNewTable","deleteTable","fetchProgress","updateTable","UPDATE_TABLE","getTables","dispatch","response","status","data","createNewTable","items","days","createTable","deleteTableById"],"sources":["C:/Dev/react/schedule for the day/client/src/redux/tables-reducer.ts"],"sourcesContent":["import { tableAPI, tablesAPI } from \"../api/tables/tables-api\"\r\nimport { BaseThunkType, InferActionsType } from \"./redux-store\"\r\n\r\nconst SET_NEW_TABLE = 'SET_NEW_TABLE'\r\n//const UPDATE_TABLE = 'UPDATE_TABLE'\r\nconst SET_TABLES = \"SET_TABLES\"\r\nconst SET_FETCH_PROGRESS = \"SET_FETCH_PROGRESS\"\r\nconst DELETE_TABLE = \"DELETE_TABLE\"\r\n\r\ntype ActionsType = InferActionsType<typeof actions>\r\ntype InitialStateType = typeof initialState\r\ntype ThunkType = BaseThunkType<ActionsType>\r\n\r\nexport type tableFullType = {\r\n    tableData:tableType\r\n    title:string\r\n    __v:number\r\n    _id:string\r\n}\r\nexport type tableType = {\r\n    items:Array<string>\r\n    days:Array<string | number | undefined>\r\n    data:Array<dataType>\r\n}\r\nexport type dataType = {\r\n    name:string\r\n    status: Array<string>\r\n}\r\n\r\nconst initialState = {\r\n    tables:[] as Array<tableFullType>,\r\n    progress:true as boolean\r\n}\r\n\r\nconst tablesReducer = (state:InitialStateType = initialState, action:ActionsType):InitialStateType => {\r\n    switch(action.type) {\r\n        case SET_TABLES : {\r\n            return {\r\n                ...state,\r\n                tables:action.tables\r\n            }\r\n        } \r\n        case SET_NEW_TABLE : {\r\n            return {\r\n                ...state,\r\n                tables:[...state.tables,action.table]\r\n            }\r\n        } \r\n       /* case UPDATE_TABLE: {\r\n            debugger\r\n            const updatedTables:Array<tableFullType> = state.tables.map((table) => {\r\n                if (table._id === action.table._id) {\r\n                    return action.table;\r\n                }\r\n                return table;\r\n            });\r\n            debugger\r\n            return {\r\n                ...state,\r\n                tables: updatedTables,\r\n            };\r\n        }*/\r\n        case SET_FETCH_PROGRESS: {\r\n            return {\r\n                ...state,\r\n                progress: action.progress,\r\n            };\r\n        }\r\n        case DELETE_TABLE: {\r\n            const newTables:Array<tableFullType> = state.tables.filter((table:tableFullType) => {\r\n                if(table._id !== action.id) {\r\n                    return false\r\n                }\r\n                return true\r\n            })\r\n            debugger\r\n            return {\r\n                ...state,\r\n                tables:newTables\r\n            };\r\n        }\r\n        default : {\r\n            return state\r\n        }\r\n    }\r\n}\r\nexport const actions = {\r\n    setTables:(tables:Array<tableFullType>) => ({type:SET_TABLES,tables}),\r\n    setNewTable:(table:tableFullType) => ({type:SET_NEW_TABLE,table}),\r\n    deleteTable:(id:string) => ({type:DELETE_TABLE,id}),\r\n    fetchProgress:(progress:boolean) => ({type:SET_FETCH_PROGRESS,progress}),\r\n    updateTable: (table:tableFullType) => ({type: UPDATE_TABLE,table})\r\n}\r\n\r\n\r\nexport const getTables = ():ThunkType => async (dispatch) => {\r\n    dispatch(actions.fetchProgress(false))\r\n    let response = await tablesAPI.getTables()\r\n    if(response.status === 200) {\r\n        dispatch(actions.setTables(response.data))\r\n    }\r\n    dispatch(actions.fetchProgress(true))\r\n}\r\nexport const createNewTable = ({items,days,data}):ThunkType => async (dispatch) => {\r\n    dispatch(actions.fetchProgress(false))\r\n    let response = await tableAPI.createTable({items,days,data});\r\n    if(response.status === 200) {\r\n        dispatch(actions.setNewTable(response.data))\r\n    }\r\n    dispatch(actions.fetchProgress(true))\r\n}\r\nexport const deleteTableById = (id:string):ThunkType => async (dispatch) => {\r\n    let response = await tableAPI.deleteTable(id);\r\n    debugger\r\n    if(response.status === 200) {\r\n        dispatch(actions.deleteTable(id))\r\n    }\r\n}\r\n\r\nexport default tablesReducer"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}