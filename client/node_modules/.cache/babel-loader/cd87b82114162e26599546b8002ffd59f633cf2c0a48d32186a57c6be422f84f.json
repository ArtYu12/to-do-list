{"ast":null,"code":"const SET_NEW_TODO = 'SET_NEW_PURPOSE';\nconst DELETE_TODO = 'DELETE_PURPOSE';\nconst SET_STATUS_TODO = 'SET_STATUS_TODO';\nconst initialState = {\n  todos: []\n};\nconst planReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case SET_NEW_TODO:\n      {\n        return {\n          ...state,\n          todos: [action.todo, ...state.todos]\n        };\n      }\n    case DELETE_TODO:\n      {\n        return {\n          ...state,\n          todos: state.todos.filter(item => item.id != action.todoId)\n        };\n      }\n    case SET_STATUS_TODO:\n      {\n        return {\n          ...state,\n          todos: state.todos.filter(item => {\n            if (item.id != action.todoId) {\n              item.completed = !item.completed;\n            }\n          })\n        };\n      }\n    default:\n      {\n        return state;\n      }\n  }\n};\nexport const actions = {\n  setNewTodo: todo => ({\n    type: SET_NEW_TODO,\n    todo\n  }),\n  deleteTodo: todoId => ({\n    type: DELETE_TODO,\n    todoId\n  })\n};\nexport default planReducer;","map":{"version":3,"names":["SET_NEW_TODO","DELETE_TODO","SET_STATUS_TODO","initialState","todos","planReducer","state","action","type","todo","filter","item","id","todoId","completed","actions","setNewTodo","deleteTodo"],"sources":["C:/Dev/react/Schedule for the day/client/src/redux/plan-reducer.ts"],"sourcesContent":["import { Todo } from \"../components/planPage/types/types\"\r\nimport { InferActionsType } from \"./redux-store\"\r\n\r\ntype ActionsType = InferActionsType<typeof actions>\r\ntype InitialStateType = typeof initialState\r\n\r\nconst SET_NEW_TODO = 'SET_NEW_PURPOSE'\r\nconst DELETE_TODO = 'DELETE_PURPOSE'\r\nconst SET_STATUS_TODO = 'SET_STATUS_TODO'\r\n\r\nconst initialState = {\r\n    todos:[] as Array<Todo>\r\n}\r\n\r\nconst planReducer = (state:InitialStateType = initialState,action:ActionsType):InitialStateType => {\r\n    switch(action.type) {\r\n        case SET_NEW_TODO : {\r\n            return { ...state,\r\n                todos:[action.todo,...state.todos]\r\n            }\r\n        }\r\n        case DELETE_TODO : {\r\n            return {\r\n                ...state,\r\n                todos:state.todos.filter((item) => item.id != action.todoId)\r\n            }\r\n        }\r\n        case SET_STATUS_TODO : {\r\n            return {\r\n                ...state,\r\n                todos:state.todos.filter((item) => {\r\n                    if(item.id != action.todoId) {\r\n                        item.completed = !item.completed\r\n                    }\r\n                })\r\n            }\r\n        }\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    setNewTodo:(todo:Todo) => ({type:SET_NEW_TODO,todo}),\r\n    deleteTodo:(todoId:number) => ({type:DELETE_TODO,todoId}),\r\n}\r\n\r\nexport default planReducer"],"mappings":"AAMA,MAAMA,YAAY,GAAG,iBAAiB;AACtC,MAAMC,WAAW,GAAG,gBAAgB;AACpC,MAAMC,eAAe,GAAG,iBAAiB;AAEzC,MAAMC,YAAY,GAAG;EACjBC,KAAK,EAAC;AACV,CAAC;AAED,MAAMC,WAAW,GAAG,YAA+E;EAAA,IAA9EC,KAAsB,uEAAGH,YAAY;EAAA,IAACI,MAAkB;EACzE,QAAOA,MAAM,CAACC,IAAI;IACd,KAAKR,YAAY;MAAG;QAChB,OAAO;UAAE,GAAGM,KAAK;UACbF,KAAK,EAAC,CAACG,MAAM,CAACE,IAAI,EAAC,GAAGH,KAAK,CAACF,KAAK;QACrC,CAAC;MACL;IACA,KAAKH,WAAW;MAAG;QACf,OAAO;UACH,GAAGK,KAAK;UACRF,KAAK,EAACE,KAAK,CAACF,KAAK,CAACM,MAAM,CAAEC,IAAI,IAAKA,IAAI,CAACC,EAAE,IAAIL,MAAM,CAACM,MAAM;QAC/D,CAAC;MACL;IACA,KAAKX,eAAe;MAAG;QACnB,OAAO;UACH,GAAGI,KAAK;UACRF,KAAK,EAACE,KAAK,CAACF,KAAK,CAACM,MAAM,CAAEC,IAAI,IAAK;YAC/B,IAAGA,IAAI,CAACC,EAAE,IAAIL,MAAM,CAACM,MAAM,EAAE;cACzBF,IAAI,CAACG,SAAS,GAAG,CAACH,IAAI,CAACG,SAAS;YACpC;UACJ,CAAC;QACL,CAAC;MACL;IACA;MAAS;QACL,OAAOR,KAAK;MAChB;EAAC;AAET,CAAC;AAED,OAAO,MAAMS,OAAO,GAAG;EACnBC,UAAU,EAAEP,IAAS,KAAM;IAACD,IAAI,EAACR,YAAY;IAACS;EAAI,CAAC,CAAC;EACpDQ,UAAU,EAAEJ,MAAa,KAAM;IAACL,IAAI,EAACP,WAAW;IAACY;EAAM,CAAC;AAC5D,CAAC;AAED,eAAeR,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}