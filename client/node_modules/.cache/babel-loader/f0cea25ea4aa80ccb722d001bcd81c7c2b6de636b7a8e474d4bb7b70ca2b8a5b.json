{"ast":null,"code":"import axios from \"axios\";\nconst instanse = axios.create({\n  withCredentials: true,\n  headers: {\n    'API-KEY': 'cafd4f76-51d0-40a7-93fa-907a2586d1e6'\n  },\n  baseURL: 'https://social-network.samuraijs.com/api/1.0/'\n});\nexport const userAPI = {\n  getUsers(currentPage, pageSize) {\n    return instanse.get(`users?page=${currentPage}&count=${pageSize}`).then(response => response.data);\n  },\n  follow(userId) {\n    return instanse.post(`follow/${userId}`);\n  },\n  unfollow(userId) {\n    return instanse.delete(`follow/${userId}`);\n  }\n};\nexport const profileAPI = {\n  getProfile(profileId) {\n    return instanse.get(`profile/${profileId}`);\n  },\n  getStatus(profileId) {\n    return instanse.get(`profile/status/${profileId}`);\n  },\n  updateStatus(status) {\n    return instanse.put(`profile/status`, {\n      status: status\n    });\n  },\n  savePhoto(photoFile) {\n    let formData = new FormData();\n    formData.append('image', photoFile);\n    return instanse.put(`profile/photo`, formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n  },\n  saveProfile(profile) {\n    return instanse.put(`profile`, profile);\n  }\n};\nexport let ResultCodeEnum;\n(function (ResultCodeEnum) {\n  ResultCodeEnum[ResultCodeEnum[\"Success\"] = 0] = \"Success\";\n  ResultCodeEnum[ResultCodeEnum[\"Error\"] = 0] = \"Error\";\n})(ResultCodeEnum || (ResultCodeEnum = {}));\nexport let ResultCodeWithCaptchaEnum;\n(function (ResultCodeWithCaptchaEnum) {\n  ResultCodeWithCaptchaEnum[ResultCodeWithCaptchaEnum[\"CaptchaIsRequired\"] = 10] = \"CaptchaIsRequired\";\n})(ResultCodeWithCaptchaEnum || (ResultCodeWithCaptchaEnum = {}));\nexport const authAPI = {\n  getData() {\n    return instanse.get(`auth/me`).then(response => response.data);\n  },\n  login(email, password) {\n    let rememberMe = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    let captcha = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n    return instanse.post(`auth/login`, {\n      email,\n      password,\n      rememberMe,\n      captcha\n    }).then(res => res.data);\n  },\n  loginout() {\n    return instanse.delete(`auth/login`);\n  }\n};\nexport const securityAPI = {\n  getCaptchaUrl() {\n    return instanse.get(`security/get-captcha-url`);\n  }\n};","map":{"version":3,"names":["axios","instanse","create","withCredentials","headers","baseURL","userAPI","getUsers","currentPage","pageSize","get","then","response","data","follow","userId","post","unfollow","delete","profileAPI","getProfile","profileId","getStatus","updateStatus","status","put","savePhoto","photoFile","formData","FormData","append","saveProfile","profile","ResultCodeEnum","ResultCodeWithCaptchaEnum","authAPI","getData","login","email","password","rememberMe","captcha","res","loginout","securityAPI","getCaptchaUrl"],"sources":["C:/Dev/react/project1/src/components/api/api.ts"],"sourcesContent":["import axios  from \"axios\"\r\nimport { ProfileType } from \"../../types/types\"\r\n\r\nconst instanse = axios.create({\r\n    withCredentials:true,\r\n    headers:{'API-KEY':'cafd4f76-51d0-40a7-93fa-907a2586d1e6'},\r\n    baseURL:'https://social-network.samuraijs.com/api/1.0/'\r\n})\r\n\r\nexport const userAPI = {\r\n    getUsers(currentPage:number,pageSize:number) {\r\n        return instanse.get(`users?page=${currentPage}&count=${pageSize}`).then(response => response.data)\r\n    },\r\n    follow(userId:number) {\r\n        return instanse.post<FollowType>(`follow/${userId}`)\r\n    },\r\n    unfollow(userId:number) {\r\n        return instanse.delete<FollowType>(`follow/${userId}`)\r\n    }\r\n}\r\n\r\ntype UsersType = {\r\n    \"name\": s,\r\n    \"id\": 1,\r\n    \"photos\": {\r\n    \"small\": null,\r\n    \"large\": null\r\n    },\r\n    \"status\": null,\r\n    \"followed\": false\r\n}\r\ntype FollowType = {\r\n    resultCode: ResultCodeEnum | ResultCodeWithCaptchaEnum\r\n    messages: Array<string>,\r\n    data: {}\r\n}\r\ntype UpdateType = {\r\n    resultCode: ResultCodeEnum | ResultCodeWithCaptchaEnum\r\n    messages: string[]\r\n    data: {status:string}\r\n}\r\nexport const profileAPI = {\r\n    getProfile(profileId:number) {\r\n        return instanse.get<ProfileType>(`profile/${profileId}`);\r\n    },\r\n    getStatus(profileId:number) {\r\n        return instanse.get(`profile/status/${profileId}`);\r\n    },\r\n    updateStatus(status:string) {\r\n        return instanse.put<UpdateType>(`profile/status`,{status:status});\r\n    },\r\n    savePhoto(photoFile:any) {\r\n        let formData = new FormData();\r\n        formData.append('image',photoFile)\r\n        return instanse.put(`profile/photo`,formData,{\r\n            headers:{\r\n                'Content-Type':'multipart/form-data'\r\n            }\r\n        });\r\n    },\r\n    saveProfile(profile:ProfileType) {\r\n        return instanse.put<ProfileType>(`profile`,profile);\r\n    },\r\n}\r\n\r\ntype MeType = {\r\n    data:{id:number,email:string,login:string}\r\n    resultCode:ResultCodeEnum\r\n    messages:string[]\r\n}\r\ntype LoginType = {\r\n    data:{userId:number}\r\n    resultCode:ResultCodeEnum | ResultCodeWithCaptchaEnum\r\n    messages:string[]\r\n}\r\nexport enum ResultCodeEnum {\r\n    Success = 0,\r\n    Error = 0\r\n}\r\nexport enum ResultCodeWithCaptchaEnum {\r\n    CaptchaIsRequired = 10\r\n}\r\nexport const authAPI = {\r\n    getData() {\r\n        return instanse.get<MeType>(`auth/me`).then(response => response.data);\r\n    },\r\n    login(email:string,password:string,rememberMe:boolean = false,captcha: null | string = null) {\r\n        return instanse.post<LoginType>(`auth/login`,{email,password,rememberMe,captcha}).then(res => res.data);\r\n    },\r\n    loginout() {\r\n        return instanse.delete<LoginType>(`auth/login`);\r\n    },\r\n}\r\nexport const securityAPI = {\r\n    getCaptchaUrl() {\r\n        return instanse.get(`security/get-captcha-url`)\r\n    },\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}