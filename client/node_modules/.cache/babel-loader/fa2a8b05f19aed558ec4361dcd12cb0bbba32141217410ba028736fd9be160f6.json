{"ast":null,"code":"import { userAPI } from '../components/api/api';\nimport { updateObjectInArray } from '../utials/object-helpers';\nconst FOLLOW = 'FOLLOW';\nconst UNFOLLOW = 'UNFOLLOW';\nconst SET_USERS = 'SET_USERS';\nconst SET_CURRENT_PAGE = ' SET_CURRENT_PAGE';\nconst SET_TOTAL_USERS_COUNT = 'SET_TOTAL_USERS_COUNT';\nconst TOGGLE_IS_FETCHING = 'TOGGLE_IS_FETCHING';\nconst TOGGLE_IS_FOLLOWING_PROGRESS = 'TOGGLE_IS_FOLLOWING_PROGRESS';\nlet initialState = {\n  users: [],\n  pageSize: 5,\n  totalUsersCount: 0,\n  currentPage: 1,\n  isFetching: true,\n  folowingInProgress: [] //array of users id\n};\n\nlet iterator = str[Symbol.iterator];\nconst usersReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case FOLLOW:\n      {\n        return {\n          ...state,\n          users: updateObjectInArray(state.users, action.userId, 'id', {\n            followed: true\n          })\n        };\n      }\n    case UNFOLLOW:\n      {\n        return {\n          ...state,\n          users: updateObjectInArray(state.users, action.userId, 'id', {\n            followed: false\n          })\n        };\n      }\n    case SET_USERS:\n      {\n        return {\n          ...state,\n          users: action.users\n        };\n      }\n    case SET_CURRENT_PAGE:\n      {\n        return {\n          ...state,\n          currentPage: action.currentPage\n        };\n      }\n    case SET_TOTAL_USERS_COUNT:\n      {\n        return {\n          ...state,\n          totalUsersCount: action.totalUsersCount\n        };\n      }\n    case TOGGLE_IS_FETCHING:\n      {\n        return {\n          ...state,\n          isFetching: action.isFetching\n        };\n      }\n    case TOGGLE_IS_FOLLOWING_PROGRESS:\n      {\n        return {\n          ...state,\n          folowingInProgress: action.isFetching ? [...state.folowingInProgress, action.userId] : [state.folowingInProgress.filter(id => id !== action.userId)]\n        };\n      }\n    default:\n      {\n        return state;\n      }\n  }\n};\nexport const acceptFollow = userId => ({\n  type: FOLLOW,\n  userId\n});\nexport const acceptUnfollow = userId => ({\n  type: UNFOLLOW,\n  userId\n});\nexport const setUsersAC = users => ({\n  type: SET_USERS,\n  users\n});\nexport const setCurrentPage = currentPage => ({\n  type: SET_CURRENT_PAGE,\n  currentPage\n});\nexport const setTotalUsersCount = totalUsersCount => ({\n  type: SET_TOTAL_USERS_COUNT,\n  totalUsersCount\n});\nexport const toggleIsFetching = isFetching => ({\n  type: TOGGLE_IS_FETCHING,\n  isFetching\n});\nexport const toggleFollowingProgress = (isFetching, userId) => ({\n  type: TOGGLE_IS_FOLLOWING_PROGRESS,\n  isFetching,\n  userId\n});\nexport const getUsers = (currentPage, pageSize) => {\n  return async dispatch => {\n    dispatch(toggleIsFetching(true));\n    dispatch(setCurrentPage(currentPage));\n    let data = await userAPI.getUsers(currentPage, pageSize);\n    dispatch(toggleIsFetching(false));\n    dispatch(setUsersAC(data.items));\n    dispatch(setTotalUsersCount(data.totalCount));\n  };\n};\nconst followUnfollowFlow = async (dispatch, userId, apiMethod, AC) => {\n  dispatch(toggleFollowingProgress(true, userId));\n  let response = await apiMethod(userId);\n  if (response.data.resultCode === 0) {\n    dispatch(AC(userId));\n  }\n  dispatch(toggleFollowingProgress(false, userId));\n};\nexport const follow = userId => {\n  return async dispatch => {\n    followUnfollowFlow(dispatch, userId, userAPI.follow.bind(userAPI), acceptFollow);\n  };\n};\nexport const unfollow = userId => {\n  return async dispatch => {\n    followUnfollowFlow(dispatch, userId, userAPI.unfollow.bind(userAPI), acceptUnfollow);\n  };\n};\nexport default usersReducer;","map":{"version":3,"names":["userAPI","updateObjectInArray","FOLLOW","UNFOLLOW","SET_USERS","SET_CURRENT_PAGE","SET_TOTAL_USERS_COUNT","TOGGLE_IS_FETCHING","TOGGLE_IS_FOLLOWING_PROGRESS","initialState","users","pageSize","totalUsersCount","currentPage","isFetching","folowingInProgress","iterator","str","Symbol","usersReducer","state","action","type","userId","followed","filter","id","acceptFollow","acceptUnfollow","setUsersAC","setCurrentPage","setTotalUsersCount","toggleIsFetching","toggleFollowingProgress","getUsers","dispatch","data","items","totalCount","followUnfollowFlow","apiMethod","AC","response","resultCode","follow","bind","unfollow"],"sources":["C:/Dev/react/project1/src/redux/users-reducer.ts"],"sourcesContent":["import {userAPI} from '../components/api/api';\r\nimport {updateObjectInArray} from '../utials/object-helpers'\r\nimport {UserType} from './../types/types'\r\n\r\nconst FOLLOW = 'FOLLOW'\r\nconst UNFOLLOW = 'UNFOLLOW'\r\nconst SET_USERS = 'SET_USERS'\r\nconst SET_CURRENT_PAGE = ' SET_CURRENT_PAGE'\r\nconst SET_TOTAL_USERS_COUNT = 'SET_TOTAL_USERS_COUNT'\r\nconst TOGGLE_IS_FETCHING = 'TOGGLE_IS_FETCHING'\r\nconst TOGGLE_IS_FOLLOWING_PROGRESS = 'TOGGLE_IS_FOLLOWING_PROGRESS'\r\n\r\nlet initialState = {\r\n  users:[] as Array<UserType>,\r\n  pageSize: 5,\r\n  totalUsersCount: 0,\r\n  currentPage:1,\r\n  isFetching:true,\r\n  folowingInProgress:[] as Array<number> | boolean, //array of users id\r\n}\r\nlet iterator = str[Symbol.iterator] \r\ntype initialStateType = typeof initialState\r\n\r\nconst usersReducer = (state:initialStateType = initialState,action:ActionsType):initialStateType =>{\r\n    switch(action.type){\r\n      \r\n        case FOLLOW: {\r\n          return { \r\n            ...state, \r\n            users: updateObjectInArray(state.users,action.userId,'id',{followed:true})\r\n          }\r\n        }\r\n        case UNFOLLOW: {\r\n          return { \r\n            ...state, \r\n            users: updateObjectInArray(state.users,action.userId,'id',{followed:false})\r\n          }\r\n        }\r\n        case SET_USERS : {\r\n          return {\r\n            ...state, users:action.users \r\n          }\r\n        }\r\n        case SET_CURRENT_PAGE : {\r\n          return {\r\n            ...state, currentPage:action.currentPage \r\n          }\r\n        }\r\n        case SET_TOTAL_USERS_COUNT : {\r\n          return {\r\n            ...state, totalUsersCount:action.totalUsersCount\r\n          }\r\n        }\r\n        case TOGGLE_IS_FETCHING : {\r\n          return {\r\n            ...state, isFetching:action.isFetching\r\n          }\r\n        }\r\n        case TOGGLE_IS_FOLLOWING_PROGRESS : {\r\n          return {\r\n            ...state, folowingInProgress:action.isFetching\r\n            ?[...state.folowingInProgress ,action.userId]\r\n            :[state.folowingInProgress.filter(id => id !== action.userId)]\r\n          }\r\n        }\r\n        default: {\r\n            return state;\r\n        }\r\n  }\r\n}\r\n\r\ntype ActionsType = acceptFollowType | acceptUnfollowType |\r\n setUsersACType | setCurrentPageType | setTotalUsersCountType |\r\n toggleIsFetchingType | toggleFollowingProgressType\r\n\r\n\r\n\r\ntype acceptFollowType = {\r\n  type:typeof FOLLOW\r\n  userId:number\r\n}\r\nexport const acceptFollow = (userId:number):acceptFollowType => ({type:FOLLOW , userId})\r\ntype acceptUnfollowType = {\r\n  type:typeof UNFOLLOW\r\n  userId:number\r\n}\r\nexport const acceptUnfollow = (userId:number):acceptUnfollowType => ({type:UNFOLLOW,userId})\r\ntype setUsersACType = {\r\n  type:typeof SET_USERS\r\n  users:Array<UserType>\r\n}\r\nexport const setUsersAC = (users:Array<UserType>):setUsersACType => ({type:SET_USERS,users})\r\ntype setCurrentPageType = {\r\n  type:typeof SET_CURRENT_PAGE\r\n  currentPage:number\r\n}\r\nexport const setCurrentPage = (currentPage:number):setCurrentPageType => ({type:SET_CURRENT_PAGE, currentPage})\r\ntype setTotalUsersCountType = {\r\n  type:typeof SET_TOTAL_USERS_COUNT\r\n  totalUsersCount:number\r\n}\r\nexport const setTotalUsersCount = (totalUsersCount:number):setTotalUsersCountType => ({type:SET_TOTAL_USERS_COUNT, totalUsersCount})\r\ntype toggleIsFetchingType = {\r\n  type:typeof TOGGLE_IS_FETCHING\r\n  isFetching:boolean\r\n}\r\nexport const toggleIsFetching = (isFetching:boolean):toggleIsFetchingType => ({type:TOGGLE_IS_FETCHING, isFetching})\r\ntype toggleFollowingProgressType = {\r\n  type:typeof TOGGLE_IS_FOLLOWING_PROGRESS\r\n  isFetching:boolean\r\n  userId:number\r\n}\r\nexport const toggleFollowingProgress = (isFetching:boolean,userId:number):toggleFollowingProgressType => ({type:TOGGLE_IS_FOLLOWING_PROGRESS, isFetching,userId})\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport const getUsers = (currentPage:number,pageSize:number) => { \r\n  return async (dispatch:any) => {\r\n    dispatch(toggleIsFetching(true))\r\n    dispatch(setCurrentPage(currentPage))\r\n    let data = await userAPI.getUsers(currentPage,pageSize)\r\n        dispatch(toggleIsFetching(false))\r\n        dispatch(setUsersAC(data.items));\r\n        dispatch(setTotalUsersCount(data.totalCount));\r\n  }\r\n}\r\n\r\nconst followUnfollowFlow = async (dispatch:any,userId:number,apiMethod:any,AC:any) => {\r\n  dispatch(toggleFollowingProgress(true,userId));\r\n  let response = await apiMethod(userId)\r\n    if(response.data.resultCode === 0) {\r\n      dispatch(AC(userId));\r\n    }\r\n  dispatch(toggleFollowingProgress(false,userId));\r\n}\r\n\r\nexport const follow = (userId:number) => { \r\n  return async (dispatch:any) =>  {\r\n    followUnfollowFlow(dispatch,userId,userAPI.follow.bind(userAPI),acceptFollow);\r\n  }\r\n}\r\nexport const unfollow = (userId:number) => { \r\n  return async (dispatch:any) =>  {\r\n    followUnfollowFlow(dispatch,userId,userAPI.unfollow.bind(userAPI),acceptUnfollow);\r\n  }\r\n}\r\nexport default usersReducer;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}