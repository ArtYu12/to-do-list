{"ast":null,"code":"const SET_NEW_TABLE = 'SET_NEW_TABLE';\nconst UPDATE_DATA = 'UPDATE_DATA';\nconst initialState = {\n  tables: []\n};\nconst tablesReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case SET_NEW_TABLE:\n      {\n        let newTable = {\n          id: \"1\",\n          name: `Table`,\n          tableData: {\n            items: action.table.items,\n            days: action.table.days,\n            data: action.table.data\n          }\n        };\n        let prewiousTable = state.tables[state.tables.length - 1] || null;\n        if (prewiousTable !== null) {\n          newTable.id = String(parseInt(prewiousTable.id) + 1);\n        }\n        return {\n          ...state,\n          tables: [...state.tables, newTable]\n        };\n      }\n    default:\n      {\n        return state;\n      }\n  }\n};\nexport const actions = {\n  setNewTable: table => ({\n    type: SET_NEW_TABLE,\n    table\n  })\n};\nexport default tablesReducer;","map":{"version":3,"names":["SET_NEW_TABLE","UPDATE_DATA","initialState","tables","tablesReducer","state","action","type","newTable","id","name","tableData","items","table","days","data","prewiousTable","length","String","parseInt","actions","setNewTable"],"sources":["C:/Dev/react/Schedule for the day/client/src/redux/tables-reducer.ts"],"sourcesContent":["import { InferActionsType } from \"./redux-store.ts\"\r\n\r\nconst SET_NEW_TABLE = 'SET_NEW_TABLE'\r\nconst UPDATE_DATA = 'UPDATE_DATA'\r\n\r\ntype ActionsType = InferActionsType<typeof actions>\r\ntype InitialStateType = typeof initialState\r\n\r\n\r\ntype tableTypeAction = {\r\n    items:Array<string>\r\n    days:Array<string | number | undefined>\r\n    data:Array<dataType>\r\n}\r\nexport type tableType = {\r\n    id:string\r\n    name:string\r\n    tableData:tableTypeAction\r\n}\r\nexport type dataType = {\r\n    name:string\r\n    status: Array<string>\r\n}\r\n\r\nconst initialState = {\r\n    tables:[] as Array<tableType>\r\n}\r\n\r\nconst tablesReducer = (state:InitialStateType = initialState, action:ActionsType):InitialStateType => {\r\n    switch(action.type) {\r\n        case SET_NEW_TABLE : {\r\n            let newTable = {\r\n                id:\"1\",\r\n                name: `Table`,\r\n                tableData:{\r\n                    items:action.table.items,\r\n                    days:action.table.days,\r\n                    data:action.table.data\r\n                }\r\n            }\r\n            let prewiousTable = state.tables[state.tables.length - 1] || null\r\n            if(prewiousTable !== null) {\r\n                newTable.id = String(parseInt(prewiousTable.id) + 1)\r\n            }\r\n            return {\r\n                ...state,\r\n                tables:[...state.tables,newTable]\r\n            }\r\n        }\r\n        default : {\r\n            return state\r\n        }\r\n    }\r\n}\r\nexport const actions = {\r\n    setNewTable:(table:tableTypeAction) => ({type:SET_NEW_TABLE,table})\r\n}\r\n\r\nexport default tablesReducer"],"mappings":"AAEA,MAAMA,aAAa,GAAG,eAAe;AACrC,MAAMC,WAAW,GAAG,aAAa;AAqBjC,MAAMC,YAAY,GAAG;EACjBC,MAAM,EAAC;AACX,CAAC;AAED,MAAMC,aAAa,GAAG,YAAgF;EAAA,IAA/EC,KAAsB,uEAAGH,YAAY;EAAA,IAAEI,MAAkB;EAC5E,QAAOA,MAAM,CAACC,IAAI;IACd,KAAKP,aAAa;MAAG;QACjB,IAAIQ,QAAQ,GAAG;UACXC,EAAE,EAAC,GAAG;UACNC,IAAI,EAAG,OAAM;UACbC,SAAS,EAAC;YACNC,KAAK,EAACN,MAAM,CAACO,KAAK,CAACD,KAAK;YACxBE,IAAI,EAACR,MAAM,CAACO,KAAK,CAACC,IAAI;YACtBC,IAAI,EAACT,MAAM,CAACO,KAAK,CAACE;UACtB;QACJ,CAAC;QACD,IAAIC,aAAa,GAAGX,KAAK,CAACF,MAAM,CAACE,KAAK,CAACF,MAAM,CAACc,MAAM,GAAG,CAAC,CAAC,IAAI,IAAI;QACjE,IAAGD,aAAa,KAAK,IAAI,EAAE;UACvBR,QAAQ,CAACC,EAAE,GAAGS,MAAM,CAACC,QAAQ,CAACH,aAAa,CAACP,EAAE,CAAC,GAAG,CAAC,CAAC;QACxD;QACA,OAAO;UACH,GAAGJ,KAAK;UACRF,MAAM,EAAC,CAAC,GAAGE,KAAK,CAACF,MAAM,EAACK,QAAQ;QACpC,CAAC;MACL;IACA;MAAU;QACN,OAAOH,KAAK;MAChB;EAAC;AAET,CAAC;AACD,OAAO,MAAMe,OAAO,GAAG;EACnBC,WAAW,EAAER,KAAqB,KAAM;IAACN,IAAI,EAACP,aAAa;IAACa;EAAK,CAAC;AACtE,CAAC;AAED,eAAeT,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}