{"ast":null,"code":"const subcribers = {\n  'messages-received': [],\n  'status-changed': []\n};\nlet websocket;\nconst closeHanbler = () => {\n  setTimeout(createChannel, 3000);\n};\nconst messageHandler = e => {\n  let newMessages = JSON.parse(e.data);\n  subcribers['messages-received'].forEach(s => s(newMessages));\n};\nconst cleanUp = () => {\n  var _websocket, _websocket2;\n  (_websocket = websocket) === null || _websocket === void 0 ? void 0 : _websocket.removeEventListener('close', closeHanbler);\n  (_websocket2 = websocket) === null || _websocket2 === void 0 ? void 0 : _websocket2.removeEventListener('message', messageHandler);\n};\nfunction createChannel() {\n  var _websocket3;\n  cleanUp();\n  (_websocket3 = websocket) === null || _websocket3 === void 0 ? void 0 : _websocket3.close();\n  websocket = new WebSocket('wss://social-network.samuraijs.com/handlers/ChatHandler.ashx');\n  subs;\n  websocket.addEventListener('close', closeHanbler);\n  websocket.addEventListener('message', messageHandler);\n}\nexport const chatAPI = {\n  start() {\n    createChannel();\n  },\n  stop() {\n    var _websocket4;\n    subcribers['messages-received'] = [];\n    subcribers['status-changed'] = [];\n    (_websocket4 = websocket) === null || _websocket4 === void 0 ? void 0 : _websocket4.close();\n    cleanUp();\n  },\n  subscribe(eventName, callback) {\n    subcribers[eventName].push(callback);\n    return () => {\n      subcribers[eventName] = subcribers[eventName].filter(s => s !== callback);\n    };\n  },\n  unsubscribe(eventName, callback) {\n    subcribers[eventName] = subcribers[eventName].filter(s => s !== callback);\n  },\n  sendMessage(message) {\n    websocket.send(message);\n  }\n};","map":{"version":3,"names":["subcribers","websocket","closeHanbler","setTimeout","createChannel","messageHandler","e","newMessages","JSON","parse","data","forEach","s","cleanUp","removeEventListener","close","WebSocket","subs","addEventListener","chatAPI","start","stop","subscribe","eventName","callback","push","filter","unsubscribe","sendMessage","message","send"],"sources":["C:/Dev/react/project1/src/components/api/chat-api.ts"],"sourcesContent":["import { StatusType } from \"../../redux/chat-reducer\"\r\n\r\nexport type ChatMessageType = {\r\n    message:string\r\n    photo:string\r\n    userId:number\r\n    userName:string\r\n}\r\n\r\n\r\ntype EventsNamesType = 'messages-received' | 'status-changed'\r\ntype MessagesReceivedSubscriberType = (messages:ChatMessageType[]) => void\r\ntype StatusChangedSubscriberType = (status:StatusType) => void\r\nconst subcribers = {\r\n    'messages-received':[] as Array<MessagesReceivedSubscriberType>,\r\n    'status-changed':[] as Array<StatusChangedSubscriberType>\r\n}\r\nlet websocket:WebSocket\r\nconst closeHanbler = () => {\r\n    setTimeout(createChannel,3000)\r\n}\r\nconst messageHandler = (e:MessageEvent) => {\r\n    let newMessages = JSON.parse(e.data)\r\n    subcribers['messages-received'].forEach(s => s(newMessages))\r\n}\r\n\r\nconst cleanUp = () => {\r\n    websocket?.removeEventListener('close',closeHanbler)\r\n    websocket?.removeEventListener('message',messageHandler)\r\n}\r\nfunction createChannel() {\r\n    cleanUp()\r\n    websocket?.close()\r\n    websocket = new WebSocket('wss://social-network.samuraijs.com/handlers/ChatHandler.ashx')\r\n    subs\r\n    websocket.addEventListener('close',closeHanbler) \r\n    websocket.addEventListener('message',messageHandler) \r\n}  \r\n\r\n\r\nexport const chatAPI = {\r\n    start() {\r\n        createChannel()\r\n    },\r\n    stop() {\r\n        subcribers['messages-received'] = []\r\n        subcribers['status-changed'] = []\r\n        websocket?.close()\r\n        cleanUp() \r\n    },\r\n    subscribe(eventName: EventsNamesType,callback:MessagesReceivedSubscriberType | StatusChangedSubscriberType) {\r\n        subcribers[eventName].push(callback)\r\n        return () => {\r\n            subcribers[eventName] = subcribers[eventName].filter(s => s !== callback)\r\n        }\r\n    },\r\n    unsubscribe(eventName: EventsNamesType,callback:MessagesReceivedSubscriberType | StatusChangedSubscriberType) {\r\n        subcribers[eventName] = subcribers[eventName].filter(s => s !== callback)\r\n    },\r\n    sendMessage(message:string) {\r\n        websocket.send(message)\r\n    }\r\n}\r\n\r\n"],"mappings":"AAaA,MAAMA,UAAU,GAAG;EACf,mBAAmB,EAAC,EAA2C;EAC/D,gBAAgB,EAAC;AACrB,CAAC;AACD,IAAIC,SAAmB;AACvB,MAAMC,YAAY,GAAG,MAAM;EACvBC,UAAU,CAACC,aAAa,EAAC,IAAI,CAAC;AAClC,CAAC;AACD,MAAMC,cAAc,GAAIC,CAAc,IAAK;EACvC,IAAIC,WAAW,GAAGC,IAAI,CAACC,KAAK,CAACH,CAAC,CAACI,IAAI,CAAC;EACpCV,UAAU,CAAC,mBAAmB,CAAC,CAACW,OAAO,CAACC,CAAC,IAAIA,CAAC,CAACL,WAAW,CAAC,CAAC;AAChE,CAAC;AAED,MAAMM,OAAO,GAAG,MAAM;EAAA;EAClB,cAAAZ,SAAS,+CAAT,WAAWa,mBAAmB,CAAC,OAAO,EAACZ,YAAY,CAAC;EACpD,eAAAD,SAAS,gDAAT,YAAWa,mBAAmB,CAAC,SAAS,EAACT,cAAc,CAAC;AAC5D,CAAC;AACD,SAASD,aAAa,GAAG;EAAA;EACrBS,OAAO,EAAE;EACT,eAAAZ,SAAS,gDAAT,YAAWc,KAAK,EAAE;EAClBd,SAAS,GAAG,IAAIe,SAAS,CAAC,8DAA8D,CAAC;EACzFC,IAAI;EACJhB,SAAS,CAACiB,gBAAgB,CAAC,OAAO,EAAChB,YAAY,CAAC;EAChDD,SAAS,CAACiB,gBAAgB,CAAC,SAAS,EAACb,cAAc,CAAC;AACxD;AAGA,OAAO,MAAMc,OAAO,GAAG;EACnBC,KAAK,GAAG;IACJhB,aAAa,EAAE;EACnB,CAAC;EACDiB,IAAI,GAAG;IAAA;IACHrB,UAAU,CAAC,mBAAmB,CAAC,GAAG,EAAE;IACpCA,UAAU,CAAC,gBAAgB,CAAC,GAAG,EAAE;IACjC,eAAAC,SAAS,gDAAT,YAAWc,KAAK,EAAE;IAClBF,OAAO,EAAE;EACb,CAAC;EACDS,SAAS,CAACC,SAA0B,EAACC,QAAqE,EAAE;IACxGxB,UAAU,CAACuB,SAAS,CAAC,CAACE,IAAI,CAACD,QAAQ,CAAC;IACpC,OAAO,MAAM;MACTxB,UAAU,CAACuB,SAAS,CAAC,GAAGvB,UAAU,CAACuB,SAAS,CAAC,CAACG,MAAM,CAACd,CAAC,IAAIA,CAAC,KAAKY,QAAQ,CAAC;IAC7E,CAAC;EACL,CAAC;EACDG,WAAW,CAACJ,SAA0B,EAACC,QAAqE,EAAE;IAC1GxB,UAAU,CAACuB,SAAS,CAAC,GAAGvB,UAAU,CAACuB,SAAS,CAAC,CAACG,MAAM,CAACd,CAAC,IAAIA,CAAC,KAAKY,QAAQ,CAAC;EAC7E,CAAC;EACDI,WAAW,CAACC,OAAc,EAAE;IACxB5B,SAAS,CAAC6B,IAAI,CAACD,OAAO,CAAC;EAC3B;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}