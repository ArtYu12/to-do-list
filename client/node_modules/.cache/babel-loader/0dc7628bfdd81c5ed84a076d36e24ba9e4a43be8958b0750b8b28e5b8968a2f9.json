{"ast":null,"code":"import { authAPI } from '../components/api/auth-api';\nimport { stopSubmit } from 'redux-form';\nimport { securityAPI } from '../components/api/security-api';\nimport { ResultCodeEnum, ResultCodeWithCaptchaEnum } from '../components/api/api';\nconst SET_USER_DATA = 'react/auth/SET_USER_DATA';\nconst SET_CAPTCHA_URL = 'react/auth/SET_CAPTCHA_URL';\nlet initialState = {\n  userId: null,\n  email: null,\n  login: null,\n  isAuth: false,\n  captchaUrl: null\n};\nexport const authReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case SET_USER_DATA:\n      return {\n        ...state,\n        ...action.data\n      };\n    case SET_CAPTCHA_URL:\n      return {\n        ...state,\n        ...action.payload\n      };\n    default:\n      return state;\n  }\n};\nconst actions = {\n  setAuthUserData: (userId, email, login, isAuth) => ({\n    type: SET_USER_DATA,\n    data: {\n      userId,\n      email,\n      login,\n      isAuth\n    }\n  }),\n  setCaptchaUrl: captchaUrl => ({\n    type: SET_CAPTCHA_URL,\n    payload: {\n      captchaUrl\n    }\n  })\n};\nexport const getData = () => async dispatch => {\n  let response = await authAPI.getData();\n  if (response.resultCode === ResultCodeEnum.Success) {\n    let {\n      id,\n      login,\n      email\n    } = response.data;\n    dispatch(actions.setAuthUserData(id, email, login, true));\n  }\n};\nexport const login = (email, password, rememberMe, captcha) => async dispatch => {\n  let response = await authAPI.login(email, password, rememberMe, captcha);\n  if (response.resultCode === ResultCodeEnum.Success) {\n    dispatch(getData());\n  } else {\n    if (response.resultCode === ResultCodeWithCaptchaEnum.CaptchaIsRequired) {\n      dispatch(getCaptchaUrl());\n    }\n    let message = response.messages.length > 0 ? response.messages[0] : 'Some error';\n    dispatch(stopSubmit('login', {\n      _error: message\n    }));\n  }\n};\nexport const getCaptchaUrl = () => async dispatch => {\n  let response = await securityAPI.getCaptchaUrl();\n  const captchaUrl = response.url;\n  dispatch(actions.setCaptchaUrl(captchaUrl));\n};\nexport const loginout = () => async dispatch => {\n  let response = await authAPI.loginout();\n  if (response.data.resultCode === 0) {\n    dispatch(actions.setAuthUserData(null, null, null, false));\n  }\n};\nexport default authReducer;","map":{"version":3,"names":["authAPI","stopSubmit","securityAPI","ResultCodeEnum","ResultCodeWithCaptchaEnum","SET_USER_DATA","SET_CAPTCHA_URL","initialState","userId","email","login","isAuth","captchaUrl","authReducer","state","action","type","data","payload","actions","setAuthUserData","setCaptchaUrl","getData","dispatch","response","resultCode","Success","id","password","rememberMe","captcha","CaptchaIsRequired","getCaptchaUrl","message","messages","length","_error","url","loginout"],"sources":["C:/Dev/react/project1/src/redux/auth-reducer.ts"],"sourcesContent":["import {authAPI} from '../components/api/auth-api';\r\nimport {stopSubmit} from 'redux-form'\r\nimport {securityAPI} from '../components/api/security-api';\r\nimport {ResultCodeEnum, ResultCodeWithCaptchaEnum} from '../components/api/api';\r\nimport { ThunkAction } from 'redux-thunk';\r\nimport { AppStateType, BaseThunkType, InferActionsType } from './redux-store';\r\nimport { Action } from 'redux';\r\n\r\nconst SET_USER_DATA = 'react/auth/SET_USER_DATA'\r\nconst SET_CAPTCHA_URL = 'react/auth/SET_CAPTCHA_URL'\r\n\r\ntype ActionsType = InferActionsType<typeof actions>\r\ntype ThunkType<ExtraActionsType extends Action= {}> = BaseThunkType<ActionsType | ExtraActionsType>\r\n \r\nexport type initialState = {\r\n    userId:number | null\r\n    email:string | null\r\n    login:string | null\r\n    isAuth:boolean\r\n    captchaUrl:string | null\r\n}\r\nlet initialState:initialState =  {\r\n    userId:null,\r\n    email:null,\r\n    login:null,\r\n    isAuth:false,\r\n    captchaUrl:null,\r\n}\r\n\r\nexport const authReducer = (state:initialState = initialState,action:ActionsType):initialState =>{\r\n  switch(action.type) {\r\n    case SET_USER_DATA: \r\n        return { \r\n            ...state,\r\n            ...action.data,\r\n        }\r\n    case SET_CAPTCHA_URL: \r\n    return { \r\n        ...state,\r\n        ...action.payload\r\n    }\r\n    default: \r\n        return state;\r\n  }\r\n}\r\ntype SetAuthDataAction = {\r\n  userId:number | null\r\n  email:string | null\r\n  login:string | null\r\n  isAuth:boolean\r\n}\r\ntype SetAuthUserDataType = {\r\n  type: typeof SET_USER_DATA\r\n  data:SetAuthDataAction\r\n}\r\n\r\nconst actions = {\r\n  setAuthUserData:(userId:number | null,email:string | null,login:string | null,isAuth:boolean):SetAuthUserDataType => ({\r\n    type:SET_USER_DATA, data:{userId,email,login,isAuth}\r\n  }),\r\n  setCaptchaUrl:(captchaUrl:string):SetCaptchaUrlType => ({\r\n    type:SET_CAPTCHA_URL, payload:{captchaUrl}\r\n  })\r\n}\r\n\r\n\r\ntype SetCaptchaUrlType = {\r\n  type: typeof SET_CAPTCHA_URL\r\n  payload: {captchaUrl:string}\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport const getData = ():ThunkType => async (dispatch) => {\r\n   let response = await authAPI.getData();\r\n    if(response.resultCode === ResultCodeEnum.Success) {\r\n      let {id,login,email} = response.data;\r\n      \r\n      dispatch(actions.setAuthUserData(id, email, login,true));\r\n  }\r\n}\r\nexport const login = (email:string,password:string,rememberMe:boolean,captcha:string | any):ThunkType => async (dispatch) => {\r\n  let response = await authAPI.login(email,password,rememberMe,captcha);\r\n  if(response.resultCode === ResultCodeEnum.Success) {\r\n    dispatch(getData())\r\n  } else {\r\n    if (response.resultCode === ResultCodeWithCaptchaEnum.CaptchaIsRequired) {\r\n      dispatch(getCaptchaUrl())\r\n    }\r\n    let message = response.messages.length > 0 ?response.messages[0]:'Some error'\r\n    dispatch(stopSubmit('login',{_error:message})) \r\n  }\r\n}\r\nexport const getCaptchaUrl = ():ThunkType => async (dispatch) => {\r\n  let response = await securityAPI.getCaptchaUrl();\r\n  const captchaUrl = response.url\r\n  dispatch(actions.setCaptchaUrl(captchaUrl))\r\n}\r\nexport const loginout = ():ThunkType => async (dispatch) => {\r\n    let response = await authAPI.loginout()\r\n    if(response.data.resultCode === 0) {\r\n      dispatch(actions.setAuthUserData(null, null, null,false));\r\n  }\r\n}\r\nexport default authReducer;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}