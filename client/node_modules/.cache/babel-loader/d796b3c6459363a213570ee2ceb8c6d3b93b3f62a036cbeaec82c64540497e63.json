{"ast":null,"code":"const subcribers = {\n  'messages-received': [],\n  'status-changed': []\n};\nlet websocket;\nconst closeHanbler = () => {\n  notifySubscribersAboutStatus('pending');\n  setTimeout(createChannel, 3000);\n};\nconst messageHandler = e => {\n  let newMessages = JSON.parse(e.data);\n  subcribers['messages-received'].forEach(s => s(newMessages));\n};\nconst openHandler = () => {\n  notifySubscribersAboutStatus('ready');\n};\nconst errorHandler = () => {\n  notifySubscribersAboutStatus('error');\n};\nconst notifySubscribersAboutStatus = status => {\n  subcribers[\"status-changed\"].forEach(s => s(status));\n};\nconst cleanUp = () => {\n  var _websocket, _websocket2, _websocket3, _websocket4;\n  (_websocket = websocket) === null || _websocket === void 0 ? void 0 : _websocket.removeEventListener('close', closeHanbler);\n  (_websocket2 = websocket) === null || _websocket2 === void 0 ? void 0 : _websocket2.removeEventListener('message', messageHandler);\n  (_websocket3 = websocket) === null || _websocket3 === void 0 ? void 0 : _websocket3.removeEventListener('open', closeopenHandlerHanbler);\n  (_websocket4 = websocket) === null || _websocket4 === void 0 ? void 0 : _websocket4.removeEventListener('error', errorHandler);\n};\nfunction createChannel() {\n  var _websocket5;\n  cleanUp();\n  (_websocket5 = websocket) === null || _websocket5 === void 0 ? void 0 : _websocket5.close();\n  websocket = new WebSocket('wss://social-network.samuraijs.com/handlers/ChatHandler.ashx');\n  subcribers[\"status-changed\"].forEach(s => s('pending'));\n  notifySubscribersAboutStatus('pending');\n  websocket.addEventListener('close', closeHanbler);\n  websocket.addEventListener('message', messageHandler);\n  websocket.addEventListener('open', openHandler);\n  websocket.addEventListener('error', errorHandler);\n}\nexport const chatAPI = {\n  start() {\n    createChannel();\n  },\n  stop() {\n    var _websocket6;\n    subcribers['messages-received'] = [];\n    subcribers['status-changed'] = [];\n    (_websocket6 = websocket) === null || _websocket6 === void 0 ? void 0 : _websocket6.close();\n    cleanUp();\n  },\n  subscribe(eventName, callback) {\n    subcribers[eventName].push(callback);\n    return () => {\n      subcribers[eventName] = subcribers[eventName].filter(s => s !== callback);\n    };\n  },\n  unsubscribe(eventName, callback) {\n    subcribers[eventName] = subcribers[eventName].filter(s => s !== callback);\n  },\n  sendMessage(message) {\n    websocket.send(message);\n  }\n};","map":{"version":3,"names":["subcribers","websocket","closeHanbler","notifySubscribersAboutStatus","setTimeout","createChannel","messageHandler","e","newMessages","JSON","parse","data","forEach","s","openHandler","errorHandler","status","cleanUp","removeEventListener","closeopenHandlerHanbler","close","WebSocket","addEventListener","chatAPI","start","stop","subscribe","eventName","callback","push","filter","unsubscribe","sendMessage","message","send"],"sources":["C:/Dev/react/project1/src/components/api/chat-api.ts"],"sourcesContent":["import { StatusType } from \"../../redux/chat-reducer\"\r\n\r\nexport type ChatMessageType = {\r\n    message:string\r\n    photo:string\r\n    userId:number\r\n    userName:string\r\n}\r\n\r\n\r\ntype EventsNamesType = 'messages-received' | 'status-changed'\r\ntype MessagesReceivedSubscriberType = (messages:ChatMessageType[]) => void\r\ntype StatusChangedSubscriberType = (status:StatusType) => void\r\nconst subcribers = {\r\n    'messages-received':[] as Array<MessagesReceivedSubscriberType>,\r\n    'status-changed':[] as Array<StatusChangedSubscriberType>\r\n}\r\nlet websocket:WebSocket\r\nconst closeHanbler = () => {\r\n    notifySubscribersAboutStatus('pending')\r\n    setTimeout(createChannel,3000)\r\n}\r\nconst messageHandler = (e:MessageEvent) => {\r\n    let newMessages = JSON.parse(e.data)\r\n    subcribers['messages-received'].forEach(s => s(newMessages))\r\n}\r\nconst openHandler = () => {\r\n    notifySubscribersAboutStatus('ready')\r\n}\r\nconst errorHandler = () => {\r\n    notifySubscribersAboutStatus('error')\r\n}\r\nconst notifySubscribersAboutStatus = (status:StatusType) => {\r\n    subcribers[\"status-changed\"].forEach(s => s(status))\r\n}\r\nconst cleanUp = () => {\r\n    websocket?.removeEventListener('close',closeHanbler)\r\n    websocket?.removeEventListener('message',messageHandler)\r\n    websocket?.removeEventListener('open',closeopenHandlerHanbler)\r\n    websocket?.removeEventListener('error',errorHandler)\r\n}\r\nfunction createChannel() {\r\n    cleanUp()\r\n    websocket?.close()\r\n    websocket = new WebSocket('wss://social-network.samuraijs.com/handlers/ChatHandler.ashx')\r\n    subcribers[\"status-changed\"].forEach(s => s('pending'))\r\n    notifySubscribersAboutStatus('pending')\r\n    websocket.addEventListener('close',closeHanbler) \r\n    websocket.addEventListener('message',messageHandler) \r\n    websocket.addEventListener('open',openHandler) \r\n    websocket.addEventListener('error',errorHandler) \r\n}  \r\n\r\n\r\nexport const chatAPI = {\r\n    start() {\r\n        createChannel()\r\n    },\r\n    stop() {\r\n        subcribers['messages-received'] = []\r\n        subcribers['status-changed'] = []\r\n        websocket?.close()\r\n        cleanUp() \r\n    },\r\n    subscribe(eventName: EventsNamesType,callback:MessagesReceivedSubscriberType | StatusChangedSubscriberType) {\r\n        subcribers[eventName].push(callback)\r\n        return () => {\r\n            subcribers[eventName] = subcribers[eventName].filter(s => s !== callback)\r\n        }\r\n    },\r\n    unsubscribe(eventName: EventsNamesType,callback:MessagesReceivedSubscriberType | StatusChangedSubscriberType) {\r\n        subcribers[eventName] = subcribers[eventName].filter(s => s !== callback)\r\n    },\r\n    sendMessage(message:string) {\r\n        websocket.send(message)\r\n    }\r\n}\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}