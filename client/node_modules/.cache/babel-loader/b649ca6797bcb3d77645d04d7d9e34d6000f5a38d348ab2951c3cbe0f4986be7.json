{"ast":null,"code":"import { chatAPI } from '../components/api/chat-api.ts';\nimport { v1 } from 'uuid';\nconst MESSAGES_RECEVIED = 'SN/chat/MESSAGES_RECEVIED';\nconst STATUS_CHANGED = 'SN/chat/STATUS_CHANGED';\nlet initialState = {\n  status: 'pending',\n  messages: [],\n  status: 'pending'\n};\nexport const chatReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case MESSAGES_RECEVIED:\n      return {\n        ...state,\n        messages: [...state.messages, ...action.messages.map(m => ({\n          ...m,\n          id: v1()\n        }))].filter((m, index, array) => index => array.length - 100)\n      };\n    case STATUS_CHANGED:\n      return {\n        ...state,\n        status: action.status\n      };\n    default:\n      return state;\n  }\n};\nconst actions = {\n  setMessages: messages => ({\n    type: MESSAGES_RECEVIED,\n    messages\n  }),\n  statusChanged: status => ({\n    type: STATUS_CHANGED,\n    status\n  })\n};\nlet _newMessageHanbler = null;\nlet _statusChangedeHanbler = null;\nconst newMessageHanbler = dispatch => {\n  if (_newMessageHanbler === null) {\n    _newMessageHanbler = messages => {\n      dispatch(actions.setMessages(messages));\n    };\n  }\n  return _newMessageHanbler;\n};\nconst statusChangedeHanbler = dispatch => {\n  if (_statusChangedeHanbler === null) {\n    _statusChangedeHanbler = status => {\n      dispatch(actions.statusChanged(status));\n    };\n  }\n  return _statusChangedeHanbler;\n};\nexport const startMessagesListening = () => async dispatch => {\n  chatAPI.start();\n  chatAPI.subscribe('messages-received', newMessageHanbler(dispatch));\n  chatAPI.subscribe('status-changed', statusChangedeHanbler(dispatch));\n};\nexport const stopMessagesListening = () => async dispatch => {\n  chatAPI.unsubscribe('messages-received', newMessageHanbler(dispatch));\n  chatAPI.unsubscribe('status-changed', statusChangedeHanbler(dispatch));\n  chatAPI.stop();\n};\nexport const sendMessageThunk = message => async dispatch => {\n  chatAPI.sendMessage(message);\n};\nexport default chatReducer;","map":{"version":3,"names":["chatAPI","v1","MESSAGES_RECEVIED","STATUS_CHANGED","initialState","status","messages","chatReducer","state","action","type","map","m","id","filter","index","array","length","actions","setMessages","statusChanged","_newMessageHanbler","_statusChangedeHanbler","newMessageHanbler","dispatch","statusChangedeHanbler","startMessagesListening","start","subscribe","stopMessagesListening","unsubscribe","stop","sendMessageThunk","message","sendMessage"],"sources":["C:/Dev/react/project1/src/redux/chat-reducer.ts"],"sourcesContent":["import {ChatMessageType, chatAPI} from '../components/api/chat-api.ts'\r\nimport {FormAction} from 'redux-form'\r\nimport { BaseThunkType, InferActionsType } from './redux-store';\r\nimport { Dispatch } from 'redux';\r\nimport {v1} from 'uuid'\r\n\r\nconst MESSAGES_RECEVIED = 'SN/chat/MESSAGES_RECEVIED'\r\nconst STATUS_CHANGED = 'SN/chat/STATUS_CHANGED'\r\nexport type ChatMessageReducerType = ChatMessageType & {id:string}\r\nlet initialState =  {\r\n  status:'pending' as StatusType,\r\n    messages:[] as ChatMessageReducerType[],\r\n    status:'pending' as StatusType,\r\n}\r\ntype ActionsType = InferActionsType<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsType | FormAction>\r\nexport type StatusType = 'pending' | 'ready' | 'error'\r\ntype initialStateType = typeof initialState\r\nexport const chatReducer = (state = initialState,action:ActionsType):initialStateType =>{\r\n  switch(action.type) {\r\n    case MESSAGES_RECEVIED: \r\n        return { \r\n            ...state,\r\n            messages:[...state.messages,...action.messages.map((m) => ({...m,id:v1()}))]\r\n            .filter((m,index,array) => index => array.length - 100)\r\n        }\r\n      case STATUS_CHANGED: \r\n        return { \r\n            ...state,\r\n           status:action.status\r\n        }\r\n    default: \r\n        return state;\r\n  }\r\n}\r\nconst actions = {\r\n  setMessages:(messages:ChatMessageType[]) => ({\r\n    type:MESSAGES_RECEVIED, messages\r\n  }),\r\n  statusChanged:(status:StatusType) => ({\r\n    type:STATUS_CHANGED, status\r\n  })\r\n}\r\nlet _newMessageHanbler:((messages:ChatMessageType[]) => void) | null = null\r\nlet _statusChangedeHanbler:((status:StatusType) => void) | null = null\r\n\r\n\r\nconst newMessageHanbler = (dispatch:Dispatch) => {\r\n    if(_newMessageHanbler === null) {\r\n      _newMessageHanbler = (messages:ChatMessageType[]) => {\r\n        dispatch(actions.setMessages(messages))\r\n      }\r\n    }\r\n    return _newMessageHanbler\r\n} \r\n\r\n\r\nconst statusChangedeHanbler = (dispatch:Dispatch) => {\r\n  if(_statusChangedeHanbler === null) {\r\n    _statusChangedeHanbler = (status:StatusType) => {\r\n      dispatch(actions.statusChanged(status))\r\n    }\r\n  }\r\n  return _statusChangedeHanbler\r\n} \r\nexport const startMessagesListening = ():ThunkType => async (dispatch) => {\r\n  chatAPI.start() \r\n  chatAPI.subscribe('messages-received',newMessageHanbler(dispatch))\r\n  chatAPI.subscribe('status-changed',statusChangedeHanbler(dispatch))\r\n}\r\nexport const stopMessagesListening = ():ThunkType => async (dispatch) => {\r\n    chatAPI.unsubscribe('messages-received',newMessageHanbler(dispatch))\r\n    chatAPI.unsubscribe('status-changed',statusChangedeHanbler(dispatch))\r\n    chatAPI.stop()\r\n }\r\nexport const sendMessageThunk = (message:string):ThunkType => async (dispatch) => {\r\n  chatAPI.sendMessage(message)\r\n}\r\nexport default chatReducer;"],"mappings":"AAAA,SAAyBA,OAAO,QAAO,+BAA+B;AAItE,SAAQC,EAAE,QAAO,MAAM;AAEvB,MAAMC,iBAAiB,GAAG,2BAA2B;AACrD,MAAMC,cAAc,GAAG,wBAAwB;AAE/C,IAAIC,YAAY,GAAI;EAClBC,MAAM,EAAC,SAAuB;EAC5BC,QAAQ,EAAC,EAA8B;EACvCD,MAAM,EAAC;AACX,CAAC;AAKD,OAAO,MAAME,WAAW,GAAG,YAA6D;EAAA,IAA5DC,KAAK,uEAAGJ,YAAY;EAAA,IAACK,MAAkB;EACjE,QAAOA,MAAM,CAACC,IAAI;IAChB,KAAKR,iBAAiB;MAClB,OAAO;QACH,GAAGM,KAAK;QACRF,QAAQ,EAAC,CAAC,GAAGE,KAAK,CAACF,QAAQ,EAAC,GAAGG,MAAM,CAACH,QAAQ,CAACK,GAAG,CAAEC,CAAC,KAAM;UAAC,GAAGA,CAAC;UAACC,EAAE,EAACZ,EAAE;QAAE,CAAC,CAAC,CAAC,CAAC,CAC3Ea,MAAM,CAAC,CAACF,CAAC,EAACG,KAAK,EAACC,KAAK,KAAKD,KAAK,IAAIC,KAAK,CAACC,MAAM,GAAG,GAAG;MAC1D,CAAC;IACH,KAAKd,cAAc;MACjB,OAAO;QACH,GAAGK,KAAK;QACTH,MAAM,EAACI,MAAM,CAACJ;MACjB,CAAC;IACL;MACI,OAAOG,KAAK;EAAC;AAErB,CAAC;AACD,MAAMU,OAAO,GAAG;EACdC,WAAW,EAAEb,QAA0B,KAAM;IAC3CI,IAAI,EAACR,iBAAiB;IAAEI;EAC1B,CAAC,CAAC;EACFc,aAAa,EAAEf,MAAiB,KAAM;IACpCK,IAAI,EAACP,cAAc;IAAEE;EACvB,CAAC;AACH,CAAC;AACD,IAAIgB,kBAAgE,GAAG,IAAI;AAC3E,IAAIC,sBAA2D,GAAG,IAAI;AAGtE,MAAMC,iBAAiB,GAAIC,QAAiB,IAAK;EAC7C,IAAGH,kBAAkB,KAAK,IAAI,EAAE;IAC9BA,kBAAkB,GAAIf,QAA0B,IAAK;MACnDkB,QAAQ,CAACN,OAAO,CAACC,WAAW,CAACb,QAAQ,CAAC,CAAC;IACzC,CAAC;EACH;EACA,OAAOe,kBAAkB;AAC7B,CAAC;AAGD,MAAMI,qBAAqB,GAAID,QAAiB,IAAK;EACnD,IAAGF,sBAAsB,KAAK,IAAI,EAAE;IAClCA,sBAAsB,GAAIjB,MAAiB,IAAK;MAC9CmB,QAAQ,CAACN,OAAO,CAACE,aAAa,CAACf,MAAM,CAAC,CAAC;IACzC,CAAC;EACH;EACA,OAAOiB,sBAAsB;AAC/B,CAAC;AACD,OAAO,MAAMI,sBAAsB,GAAG,MAAgB,MAAOF,QAAQ,IAAK;EACxExB,OAAO,CAAC2B,KAAK,EAAE;EACf3B,OAAO,CAAC4B,SAAS,CAAC,mBAAmB,EAACL,iBAAiB,CAACC,QAAQ,CAAC,CAAC;EAClExB,OAAO,CAAC4B,SAAS,CAAC,gBAAgB,EAACH,qBAAqB,CAACD,QAAQ,CAAC,CAAC;AACrE,CAAC;AACD,OAAO,MAAMK,qBAAqB,GAAG,MAAgB,MAAOL,QAAQ,IAAK;EACrExB,OAAO,CAAC8B,WAAW,CAAC,mBAAmB,EAACP,iBAAiB,CAACC,QAAQ,CAAC,CAAC;EACpExB,OAAO,CAAC8B,WAAW,CAAC,gBAAgB,EAACL,qBAAqB,CAACD,QAAQ,CAAC,CAAC;EACrExB,OAAO,CAAC+B,IAAI,EAAE;AACjB,CAAC;AACF,OAAO,MAAMC,gBAAgB,GAAIC,OAAc,IAAe,MAAOT,QAAQ,IAAK;EAChFxB,OAAO,CAACkC,WAAW,CAACD,OAAO,CAAC;AAC9B,CAAC;AACD,eAAe1B,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}