{"ast":null,"code":"import { Todos } from \"../api/todos/todo-api.ts\";\nconst SET_NEW_TODO = 'SET_NEW_PURPOSE';\nconst DELETE_TODO = 'DELETE_PURPOSE';\nconst SET_STATUS_TODO = 'SET_STATUS_TODO';\nconst SET_FETCH_PROGRESS = 'SET_FOLOWWING_PROGRESS';\nconst SET_NEW_TODOS = 'SET_NEW_TODOS';\nconst initialState = {\n  todos: [],\n  progress: true\n};\nconst planReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case SET_NEW_TODOS:\n      {\n        return {\n          ...state,\n          todos: action.todos\n        };\n      }\n    case SET_NEW_TODO:\n      {\n        return {\n          ...state,\n          todos: [action.todo, ...state.todos]\n        };\n      }\n    case DELETE_TODO:\n      {\n        return {\n          ...state,\n          todos: state.todos.filter(item => item._id !== action.todoId)\n        };\n      }\n    case SET_STATUS_TODO:\n      {\n        return {\n          ...state,\n          todos: state.todos.filter(todo => {\n            if (todo._id === action.todoId) {\n              todo.completed = !todo.completed;\n            }\n            return todo;\n          })\n        };\n      }\n    case SET_FETCH_PROGRESS:\n      {\n        return {\n          ...state,\n          progress: action.progress\n        };\n      }\n    default:\n      {\n        return state;\n      }\n  }\n};\nexport const actions = {\n  setNewTodos: todos => ({\n    type: SET_NEW_TODOS,\n    todos: todos\n  }),\n  setNewTodo: todo => ({\n    type: SET_NEW_TODO,\n    todo: todo\n  }),\n  deleteTodo: todoId => ({\n    type: DELETE_TODO,\n    todoId: todoId\n  }),\n  setStatus: todoId => ({\n    type: SET_STATUS_TODO,\n    todoId: todoId\n  }),\n  followingProgress: progress => ({\n    type: SET_FOLOWWING_PROGRESS,\n    progress: progress\n  })\n};\nexport const getTodos = () => {\n  return async dispatch => {\n    dispatch(actions.followingProgress(false));\n    let response = await Todos.getTodos();\n    if (response.status === 200) {\n      dispatch(actions.setNewTodos(response.data));\n    }\n    dispatch(actions.followingProgress(true));\n  };\n};\nexport const setTodo = todo => {\n  return async dispatch => {\n    const response = await Todos.setTodo(todo);\n    if (response.status === 200) {\n      dispatch(actions.setNewTodo(response.data));\n    }\n  };\n};\nexport const deleteTodo = id => {\n  return async dispatch => {\n    const response = await Todos.deleteTodo(id);\n    if (response.status === 200) {\n      dispatch(actions.deleteTodo(response.data._id));\n    }\n  };\n};\nexport const updateTodo = todo => {\n  return async dispatch => {\n    const response = await Todos.updateTodo(todo);\n    if (response.status === 200) {\n      dispatch(actions.setStatus(response.data._id));\n    }\n  };\n};\nexport default planReducer;","map":{"version":3,"names":["Todos","SET_NEW_TODO","DELETE_TODO","SET_STATUS_TODO","SET_FETCH_PROGRESS","SET_NEW_TODOS","initialState","todos","progress","planReducer","state","action","type","todo","filter","item","_id","todoId","completed","actions","setNewTodos","setNewTodo","deleteTodo","setStatus","followingProgress","SET_FOLOWWING_PROGRESS","getTodos","dispatch","response","status","data","setTodo","id","updateTodo"],"sources":["C:/Dev/react/Schedule for the day/client/src/redux/plan-reducer.ts"],"sourcesContent":["import { Todos } from \"../api/todos/todo-api.ts\"\r\nimport { Todo } from \"../components/planPage/types/types.ts\"\r\nimport { InferActionsType } from \"./redux-store.ts\"\r\nimport { ThunkType } from \"./tables-reducer.ts\"\r\n\r\ntype ActionsType = InferActionsType<typeof actions>\r\ntype InitialStateType = typeof initialState\r\n\r\nconst SET_NEW_TODO = 'SET_NEW_PURPOSE'\r\nconst DELETE_TODO = 'DELETE_PURPOSE'\r\nconst SET_STATUS_TODO = 'SET_STATUS_TODO'\r\nconst SET_FETCH_PROGRESS = 'SET_FOLOWWING_PROGRESS'\r\nconst SET_NEW_TODOS = 'SET_NEW_TODOS'\r\n\r\n\r\nconst initialState = {\r\n    todos:[] as Array<Todo>,\r\n    progress:true\r\n}\r\n\r\nconst planReducer = (state:InitialStateType = initialState,action:ActionsType):InitialStateType => {\r\n    switch(action.type) {\r\n        case SET_NEW_TODOS : {\r\n            return { \r\n                ...state,\r\n                todos:action.todos\r\n            }\r\n        }\r\n        case SET_NEW_TODO : {\r\n            return { ...state,\r\n                todos:[action.todo,...state.todos]\r\n            }\r\n        }\r\n        case DELETE_TODO : {\r\n            return {\r\n                ...state,\r\n                todos:state.todos.filter((item) => item._id !== action.todoId)\r\n            }\r\n        }\r\n        case SET_STATUS_TODO : {\r\n            return {\r\n                ...state,\r\n                todos:state.todos.filter((todo) => {\r\n                    if(todo._id === action.todoId) {\r\n                        todo.completed = !todo.completed\r\n                    }\r\n                    return todo\r\n                })\r\n            }\r\n        }\r\n        case SET_FETCH_PROGRESS : {\r\n            return {\r\n                ...state,\r\n                progress:action.progress\r\n            }\r\n        }\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    setNewTodos:(todos:Array<Todo>) => ({type:SET_NEW_TODOS,todos:todos}),\r\n    setNewTodo:(todo:Todo) => ({type:SET_NEW_TODO,todo:todo}),\r\n    deleteTodo:(todoId:number) => ({type:DELETE_TODO,todoId:todoId}),\r\n    setStatus:(todoId:number) => ({type:SET_STATUS_TODO,todoId:todoId}),\r\n    followingProgress:(progress:boolean) => ({type:SET_FOLOWWING_PROGRESS,progress:progress}),\r\n}\r\n\r\nexport const getTodos = ():ThunkType  => {\r\n    return async (dispatch) => {\r\n        dispatch(actions.followingProgress(false))\r\n        let response = await Todos.getTodos()\r\n        if(response.status === 200) {\r\n            dispatch(actions.setNewTodos(response.data))\r\n        }\r\n        dispatch(actions.followingProgress(true))\r\n    }\r\n}\r\nexport const setTodo = (todo:Todo):ThunkType => {\r\n    return async (dispatch) => {\r\n        const response = await Todos.setTodo(todo)\r\n        if(response.status === 200) {\r\n            dispatch(actions.setNewTodo(response.data))\r\n        }\r\n    }\r\n}\r\nexport const deleteTodo = (id:number):ThunkType => {\r\n    return async (dispatch) => {\r\n        const response = await Todos.deleteTodo(id)\r\n        if(response.status === 200) {\r\n            dispatch(actions.deleteTodo(response.data._id))\r\n        }\r\n    }\r\n}\r\nexport const updateTodo = (todo:Todo):ThunkType => {\r\n    return async (dispatch) => {\r\n        const response = await Todos.updateTodo(todo)\r\n        if(response.status === 200) {\r\n            dispatch(actions.setStatus(response.data._id))\r\n        }\r\n    }\r\n}\r\nexport default planReducer"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}